
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003024  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000aa  00800060  00003024  000030b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080010a  0080010a  00003162  2**0
                  ALLOC
  3 .stab         000030e4  00000000  00000000  00003164  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017e7  00000000  00000000  00006248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007b6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009928  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a813  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b5c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b720  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b9ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c17b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e9 06 	jmp	0xdd2	; 0xdd2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 b6 06 	jmp	0xd6c	; 0xd6c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e2       	ldi	r30, 0x24	; 36
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 30       	cpi	r26, 0x0A	; 10
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e0       	ldi	r26, 0x0A	; 10
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 30       	cpi	r26, 0x0D	; 13
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2d 11 	call	0x225a	; 0x225a <main>
      8a:	0c 94 10 18 	jmp	0x3020	; 0x3020 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 ef       	ldi	r26, 0xF4	; 244
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 ef       	ldi	r24, 0xF4	; 244
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <UART_init+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9c 83       	std	Y+4, r25	; 0x04
     b54:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     b56:	1a 82       	std	Y+2, r1	; 0x02
     b58:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     b5a:	eb e2       	ldi	r30, 0x2B	; 43
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	80 83       	st	Z, r24
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/

	UCSRB = (1<<RXEN) | (1<<TXEN);
     b62:	ea e2       	ldi	r30, 0x2A	; 42
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	88 e1       	ldi	r24, 0x18	; 24
     b68:	80 83       	st	Z, r24
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
//	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
		UCSRC = (1<<URSEL);
     b6a:	e0 e4       	ldi	r30, 0x40	; 64
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 e8       	ldi	r24, 0x80	; 128
     b70:	80 83       	st	Z, r24
		UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->bit_data)<<1);
     b72:	a0 e4       	ldi	r26, 0x40	; 64
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	e0 e4       	ldi	r30, 0x40	; 64
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	28 2f       	mov	r18, r24
     b7e:	29 7f       	andi	r18, 0xF9	; 249
     b80:	eb 81       	ldd	r30, Y+3	; 0x03
     b82:	fc 81       	ldd	r31, Y+4	; 0x04
     b84:	80 81       	ld	r24, Z
     b86:	88 2f       	mov	r24, r24
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	88 0f       	add	r24, r24
     b8c:	99 1f       	adc	r25, r25
     b8e:	82 2b       	or	r24, r18
     b90:	8c 93       	st	X, r24
		UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity)<<4);
     b92:	a0 e4       	ldi	r26, 0x40	; 64
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	e0 e4       	ldi	r30, 0x40	; 64
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	28 2f       	mov	r18, r24
     b9e:	2f 7c       	andi	r18, 0xCF	; 207
     ba0:	eb 81       	ldd	r30, Y+3	; 0x03
     ba2:	fc 81       	ldd	r31, Y+4	; 0x04
     ba4:	81 81       	ldd	r24, Z+1	; 0x01
     ba6:	88 2f       	mov	r24, r24
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	82 95       	swap	r24
     bac:	92 95       	swap	r25
     bae:	90 7f       	andi	r25, 0xF0	; 240
     bb0:	98 27       	eor	r25, r24
     bb2:	80 7f       	andi	r24, 0xF0	; 240
     bb4:	98 27       	eor	r25, r24
     bb6:	82 2b       	or	r24, r18
     bb8:	8c 93       	st	X, r24
		UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop_bit)<<3);
     bba:	a0 e4       	ldi	r26, 0x40	; 64
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	e0 e4       	ldi	r30, 0x40	; 64
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	28 2f       	mov	r18, r24
     bc6:	27 7f       	andi	r18, 0xF7	; 247
     bc8:	eb 81       	ldd	r30, Y+3	; 0x03
     bca:	fc 81       	ldd	r31, Y+4	; 0x04
     bcc:	82 81       	ldd	r24, Z+2	; 0x02
     bce:	88 2f       	mov	r24, r24
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	88 0f       	add	r24, r24
     bd4:	99 1f       	adc	r25, r25
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	88 0f       	add	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	82 2b       	or	r24, r18
     be0:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
     be2:	eb 81       	ldd	r30, Y+3	; 0x03
     be4:	fc 81       	ldd	r31, Y+4	; 0x04
     be6:	83 81       	ldd	r24, Z+3	; 0x03
     be8:	94 81       	ldd	r25, Z+4	; 0x04
     bea:	a5 81       	ldd	r26, Z+5	; 0x05
     bec:	b6 81       	ldd	r27, Z+6	; 0x06
     bee:	88 0f       	add	r24, r24
     bf0:	99 1f       	adc	r25, r25
     bf2:	aa 1f       	adc	r26, r26
     bf4:	bb 1f       	adc	r27, r27
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	aa 1f       	adc	r26, r26
     bfc:	bb 1f       	adc	r27, r27
     bfe:	88 0f       	add	r24, r24
     c00:	99 1f       	adc	r25, r25
     c02:	aa 1f       	adc	r26, r26
     c04:	bb 1f       	adc	r27, r27
     c06:	9c 01       	movw	r18, r24
     c08:	ad 01       	movw	r20, r26
     c0a:	80 e4       	ldi	r24, 0x40	; 64
     c0c:	92 e4       	ldi	r25, 0x42	; 66
     c0e:	af e0       	ldi	r26, 0x0F	; 15
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	bc 01       	movw	r22, r24
     c14:	cd 01       	movw	r24, r26
     c16:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <__udivmodsi4>
     c1a:	da 01       	movw	r26, r20
     c1c:	c9 01       	movw	r24, r18
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	9a 83       	std	Y+2, r25	; 0x02
     c22:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
     c24:	e0 e4       	ldi	r30, 0x40	; 64
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	9a 81       	ldd	r25, Y+2	; 0x02
     c2c:	89 2f       	mov	r24, r25
     c2e:	99 27       	eor	r25, r25
     c30:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     c32:	e9 e2       	ldi	r30, 0x29	; 41
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	80 83       	st	Z, r24
}
     c3a:	0f 90       	pop	r0
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	cf 91       	pop	r28
     c44:	df 91       	pop	r29
     c46:	08 95       	ret

00000c48 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
     c48:	df 93       	push	r29
     c4a:	cf 93       	push	r28
     c4c:	0f 92       	push	r0
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
     c52:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     c54:	eb e2       	ldi	r30, 0x2B	; 43
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	88 2f       	mov	r24, r24
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	80 72       	andi	r24, 0x20	; 32
     c60:	90 70       	andi	r25, 0x00	; 0
     c62:	00 97       	sbiw	r24, 0x00	; 0
     c64:	b9 f3       	breq	.-18     	; 0xc54 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     c66:	ec e2       	ldi	r30, 0x2C	; 44
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
     c6c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
     c6e:	0f 90       	pop	r0
     c70:	cf 91       	pop	r28
     c72:	df 91       	pop	r29
     c74:	08 95       	ret

00000c76 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
     c76:	df 93       	push	r29
     c78:	cf 93       	push	r28
     c7a:	cd b7       	in	r28, 0x3d	; 61
     c7c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     c7e:	eb e2       	ldi	r30, 0x2B	; 43
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	88 23       	and	r24, r24
     c86:	dc f7       	brge	.-10     	; 0xc7e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
     c88:	ec e2       	ldi	r30, 0x2C	; 44
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
}
     c8e:	cf 91       	pop	r28
     c90:	df 91       	pop	r29
     c92:	08 95       	ret

00000c94 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     c94:	df 93       	push	r29
     c96:	cf 93       	push	r28
     c98:	00 d0       	rcall	.+0      	; 0xc9a <UART_sendString+0x6>
     c9a:	0f 92       	push	r0
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	9b 83       	std	Y+3, r25	; 0x03
     ca2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     ca4:	19 82       	std	Y+1, r1	; 0x01
     ca6:	0e c0       	rjmp	.+28     	; 0xcc4 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	8a 81       	ldd	r24, Y+2	; 0x02
     cb0:	9b 81       	ldd	r25, Y+3	; 0x03
     cb2:	fc 01       	movw	r30, r24
     cb4:	e2 0f       	add	r30, r18
     cb6:	f3 1f       	adc	r31, r19
     cb8:	80 81       	ld	r24, Z
     cba:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
		i++;
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	8f 5f       	subi	r24, 0xFF	; 255
     cc2:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	8a 81       	ldd	r24, Y+2	; 0x02
     ccc:	9b 81       	ldd	r25, Y+3	; 0x03
     cce:	fc 01       	movw	r30, r24
     cd0:	e2 0f       	add	r30, r18
     cd2:	f3 1f       	adc	r31, r19
     cd4:	80 81       	ld	r24, Z
     cd6:	88 23       	and	r24, r24
     cd8:	39 f7       	brne	.-50     	; 0xca8 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
     ce6:	0f 93       	push	r16
     ce8:	1f 93       	push	r17
     cea:	df 93       	push	r29
     cec:	cf 93       	push	r28
     cee:	00 d0       	rcall	.+0      	; 0xcf0 <UART_receiveString+0xa>
     cf0:	0f 92       	push	r0
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	9b 83       	std	Y+3, r25	; 0x03
     cf8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     cfa:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
     cfc:	89 81       	ldd	r24, Y+1	; 0x01
     cfe:	28 2f       	mov	r18, r24
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	9b 81       	ldd	r25, Y+3	; 0x03
     d06:	8c 01       	movw	r16, r24
     d08:	02 0f       	add	r16, r18
     d0a:	13 1f       	adc	r17, r19
     d0c:	0e 94 3b 06 	call	0xc76	; 0xc76 <UART_recieveByte>
     d10:	f8 01       	movw	r30, r16
     d12:	80 83       	st	Z, r24
     d14:	0f c0       	rjmp	.+30     	; 0xd34 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	8f 5f       	subi	r24, 0xFF	; 255
     d1a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	28 2f       	mov	r18, r24
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	9b 81       	ldd	r25, Y+3	; 0x03
     d26:	8c 01       	movw	r16, r24
     d28:	02 0f       	add	r16, r18
     d2a:	13 1f       	adc	r17, r19
     d2c:	0e 94 3b 06 	call	0xc76	; 0xc76 <UART_recieveByte>
     d30:	f8 01       	movw	r30, r16
     d32:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	28 2f       	mov	r18, r24
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	8a 81       	ldd	r24, Y+2	; 0x02
     d3c:	9b 81       	ldd	r25, Y+3	; 0x03
     d3e:	fc 01       	movw	r30, r24
     d40:	e2 0f       	add	r30, r18
     d42:	f3 1f       	adc	r31, r19
     d44:	80 81       	ld	r24, Z
     d46:	83 32       	cpi	r24, 0x23	; 35
     d48:	31 f7       	brne	.-52     	; 0xd16 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	28 2f       	mov	r18, r24
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	9b 81       	ldd	r25, Y+3	; 0x03
     d54:	fc 01       	movw	r30, r24
     d56:	e2 0f       	add	r30, r18
     d58:	f3 1f       	adc	r31, r19
     d5a:	10 82       	st	Z, r1
}
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	1f 91       	pop	r17
     d68:	0f 91       	pop	r16
     d6a:	08 95       	ret

00000d6c <__vector_9>:
static volatile void (*ptr_funCallBabk)(void)=NULL_PTR;



ISR(TIMER1_OVF_vect)
{
     d6c:	1f 92       	push	r1
     d6e:	0f 92       	push	r0
     d70:	0f b6       	in	r0, 0x3f	; 63
     d72:	0f 92       	push	r0
     d74:	11 24       	eor	r1, r1
     d76:	2f 93       	push	r18
     d78:	3f 93       	push	r19
     d7a:	4f 93       	push	r20
     d7c:	5f 93       	push	r21
     d7e:	6f 93       	push	r22
     d80:	7f 93       	push	r23
     d82:	8f 93       	push	r24
     d84:	9f 93       	push	r25
     d86:	af 93       	push	r26
     d88:	bf 93       	push	r27
     d8a:	ef 93       	push	r30
     d8c:	ff 93       	push	r31
     d8e:	df 93       	push	r29
     d90:	cf 93       	push	r28
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
	if(ptr_funCallBabk != NULL_PTR)
     d96:	80 91 0a 01 	lds	r24, 0x010A
     d9a:	90 91 0b 01 	lds	r25, 0x010B
     d9e:	00 97       	sbiw	r24, 0x00	; 0
     da0:	29 f0       	breq	.+10     	; 0xdac <__vector_9+0x40>
	{
		(*ptr_funCallBabk)();
     da2:	e0 91 0a 01 	lds	r30, 0x010A
     da6:	f0 91 0b 01 	lds	r31, 0x010B
     daa:	09 95       	icall
	}

}
     dac:	cf 91       	pop	r28
     dae:	df 91       	pop	r29
     db0:	ff 91       	pop	r31
     db2:	ef 91       	pop	r30
     db4:	bf 91       	pop	r27
     db6:	af 91       	pop	r26
     db8:	9f 91       	pop	r25
     dba:	8f 91       	pop	r24
     dbc:	7f 91       	pop	r23
     dbe:	6f 91       	pop	r22
     dc0:	5f 91       	pop	r21
     dc2:	4f 91       	pop	r20
     dc4:	3f 91       	pop	r19
     dc6:	2f 91       	pop	r18
     dc8:	0f 90       	pop	r0
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	0f 90       	pop	r0
     dce:	1f 90       	pop	r1
     dd0:	18 95       	reti

00000dd2 <__vector_7>:


ISR(TIMER1_COMPA_vect)
{
     dd2:	1f 92       	push	r1
     dd4:	0f 92       	push	r0
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	0f 92       	push	r0
     dda:	11 24       	eor	r1, r1
     ddc:	2f 93       	push	r18
     dde:	3f 93       	push	r19
     de0:	4f 93       	push	r20
     de2:	5f 93       	push	r21
     de4:	6f 93       	push	r22
     de6:	7f 93       	push	r23
     de8:	8f 93       	push	r24
     dea:	9f 93       	push	r25
     dec:	af 93       	push	r26
     dee:	bf 93       	push	r27
     df0:	ef 93       	push	r30
     df2:	ff 93       	push	r31
     df4:	df 93       	push	r29
     df6:	cf 93       	push	r28
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
	if(ptr_funCallBabk != NULL_PTR)
     dfc:	80 91 0a 01 	lds	r24, 0x010A
     e00:	90 91 0b 01 	lds	r25, 0x010B
     e04:	00 97       	sbiw	r24, 0x00	; 0
     e06:	29 f0       	breq	.+10     	; 0xe12 <__vector_7+0x40>
	{
		(*ptr_funCallBabk)();
     e08:	e0 91 0a 01 	lds	r30, 0x010A
     e0c:	f0 91 0b 01 	lds	r31, 0x010B
     e10:	09 95       	icall
	}

}
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	ff 91       	pop	r31
     e18:	ef 91       	pop	r30
     e1a:	bf 91       	pop	r27
     e1c:	af 91       	pop	r26
     e1e:	9f 91       	pop	r25
     e20:	8f 91       	pop	r24
     e22:	7f 91       	pop	r23
     e24:	6f 91       	pop	r22
     e26:	5f 91       	pop	r21
     e28:	4f 91       	pop	r20
     e2a:	3f 91       	pop	r19
     e2c:	2f 91       	pop	r18
     e2e:	0f 90       	pop	r0
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	0f 90       	pop	r0
     e34:	1f 90       	pop	r1
     e36:	18 95       	reti

00000e38 <Timer1_init>:
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
     e38:	df 93       	push	r29
     e3a:	cf 93       	push	r28
     e3c:	00 d0       	rcall	.+0      	; 0xe3e <Timer1_init+0x6>
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
     e42:	9a 83       	std	Y+2, r25	; 0x02
     e44:	89 83       	std	Y+1, r24	; 0x01


	TCNT1=Config_Ptr->initial_value;
     e46:	ac e4       	ldi	r26, 0x4C	; 76
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e9 81       	ldd	r30, Y+1	; 0x01
     e4c:	fa 81       	ldd	r31, Y+2	; 0x02
     e4e:	80 81       	ld	r24, Z
     e50:	91 81       	ldd	r25, Z+1	; 0x01
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	9c 93       	st	X, r25
     e56:	8e 93       	st	-X, r24
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
     e58:	ef e4       	ldi	r30, 0x4F	; 79
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	8c e0       	ldi	r24, 0x0C	; 12
     e5e:	80 83       	st	Z, r24
	TCCR1B = (TCCR1B  & 0xF8) | (Config_Ptr->prescaler);
     e60:	ae e4       	ldi	r26, 0x4E	; 78
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	ee e4       	ldi	r30, 0x4E	; 78
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	98 2f       	mov	r25, r24
     e6c:	98 7f       	andi	r25, 0xF8	; 248
     e6e:	e9 81       	ldd	r30, Y+1	; 0x01
     e70:	fa 81       	ldd	r31, Y+2	; 0x02
     e72:	84 81       	ldd	r24, Z+4	; 0x04
     e74:	89 2b       	or	r24, r25
     e76:	8c 93       	st	X, r24

	if(Config_Ptr->mode==normal)
     e78:	e9 81       	ldd	r30, Y+1	; 0x01
     e7a:	fa 81       	ldd	r31, Y+2	; 0x02
     e7c:	85 81       	ldd	r24, Z+5	; 0x05
     e7e:	88 23       	and	r24, r24
     e80:	41 f4       	brne	.+16     	; 0xe92 <Timer1_init+0x5a>
	{
		TIMSK |= (1<<TOIE1);
     e82:	a9 e5       	ldi	r26, 0x59	; 89
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e9 e5       	ldi	r30, 0x59	; 89
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	84 60       	ori	r24, 0x04	; 4
     e8e:	8c 93       	st	X, r24
     e90:	1c c0       	rjmp	.+56     	; 0xeca <Timer1_init+0x92>
	}
	else if(Config_Ptr->mode==compare)
     e92:	e9 81       	ldd	r30, Y+1	; 0x01
     e94:	fa 81       	ldd	r31, Y+2	; 0x02
     e96:	85 81       	ldd	r24, Z+5	; 0x05
     e98:	81 30       	cpi	r24, 0x01	; 1
     e9a:	b9 f4       	brne	.+46     	; 0xeca <Timer1_init+0x92>
	{
		OCR1A=Config_Ptr->compare_value;
     e9c:	aa e4       	ldi	r26, 0x4A	; 74
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e9 81       	ldd	r30, Y+1	; 0x01
     ea2:	fa 81       	ldd	r31, Y+2	; 0x02
     ea4:	82 81       	ldd	r24, Z+2	; 0x02
     ea6:	93 81       	ldd	r25, Z+3	; 0x03
     ea8:	11 96       	adiw	r26, 0x01	; 1
     eaa:	9c 93       	st	X, r25
     eac:	8e 93       	st	-X, r24
		TCCR1B |= (1<<WGM12) ;
     eae:	ae e4       	ldi	r26, 0x4E	; 78
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	ee e4       	ldi	r30, 0x4E	; 78
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	88 60       	ori	r24, 0x08	; 8
     eba:	8c 93       	st	X, r24
		TIMSK |= (1<<OCIE1A);
     ebc:	a9 e5       	ldi	r26, 0x59	; 89
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e9 e5       	ldi	r30, 0x59	; 89
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	80 61       	ori	r24, 0x10	; 16
     ec8:	8c 93       	st	X, r24
	}
}
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	08 95       	ret

00000ed4 <Timer1_setCallBack>:




void Timer1_setCallBack(void(*a_ptr)(void))
{
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	00 d0       	rcall	.+0      	; 0xeda <Timer1_setCallBack+0x6>
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
     ede:	9a 83       	std	Y+2, r25	; 0x02
     ee0:	89 83       	std	Y+1, r24	; 0x01
	ptr_funCallBabk=a_ptr;
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	9a 81       	ldd	r25, Y+2	; 0x02
     ee6:	90 93 0b 01 	sts	0x010B, r25
     eea:	80 93 0a 01 	sts	0x010A, r24
}
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	08 95       	ret

00000ef8 <Timer1_deInit>:


void Timer1_deInit(void)
{
     ef8:	df 93       	push	r29
     efa:	cf 93       	push	r28
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
     f00:	ef e4       	ldi	r30, 0x4F	; 79
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	10 82       	st	Z, r1
	TCCR1B=0;
     f06:	ee e4       	ldi	r30, 0x4E	; 78
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	10 82       	st	Z, r1

	TCNT1=0;
     f0c:	ec e4       	ldi	r30, 0x4C	; 76
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	11 82       	std	Z+1, r1	; 0x01
     f12:	10 82       	st	Z, r1
	OCR1A=0;
     f14:	ea e4       	ldi	r30, 0x4A	; 74
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	11 82       	std	Z+1, r1	; 0x01
     f1a:	10 82       	st	Z, r1


	TIMSK &= ~(1<<TOIE1);
     f1c:	a9 e5       	ldi	r26, 0x59	; 89
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e9 e5       	ldi	r30, 0x59	; 89
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	8b 7f       	andi	r24, 0xFB	; 251
     f28:	8c 93       	st	X, r24
	TIMSK &= ~(1<<OCIE1A);
     f2a:	a9 e5       	ldi	r26, 0x59	; 89
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e9 e5       	ldi	r30, 0x59	; 89
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	8f 7e       	andi	r24, 0xEF	; 239
     f36:	8c 93       	st	X, r24

}
     f38:	cf 91       	pop	r28
     f3a:	df 91       	pop	r29
     f3c:	08 95       	ret

00000f3e <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
     f3e:	df 93       	push	r29
     f40:	cf 93       	push	r28
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
     f46:	2e 97       	sbiw	r28, 0x0e	; 14
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	f8 94       	cli
     f4c:	de bf       	out	0x3e, r29	; 62
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
     f52:	83 e0       	ldi	r24, 0x03	; 3
     f54:	65 e0       	ldi	r22, 0x05	; 5
     f56:	41 e0       	ldi	r20, 0x01	; 1
     f58:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
     f5c:	83 e0       	ldi	r24, 0x03	; 3
     f5e:	67 e0       	ldi	r22, 0x07	; 7
     f60:	41 e0       	ldi	r20, 0x01	; 1
     f62:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
     f66:	83 e0       	ldi	r24, 0x03	; 3
     f68:	66 e0       	ldi	r22, 0x06	; 6
     f6a:	41 e0       	ldi	r20, 0x01	; 1
     f6c:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <GPIO_setupPinDirection>

	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
     f70:	83 e0       	ldi	r24, 0x03	; 3
     f72:	66 e0       	ldi	r22, 0x06	; 6
     f74:	40 e0       	ldi	r20, 0x00	; 0
     f76:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <GPIO_writePin>
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	a0 ea       	ldi	r26, 0xA0	; 160
     f80:	b1 e4       	ldi	r27, 0x41	; 65
     f82:	8b 87       	std	Y+11, r24	; 0x0b
     f84:	9c 87       	std	Y+12, r25	; 0x0c
     f86:	ad 87       	std	Y+13, r26	; 0x0d
     f88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f8a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f8c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f8e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f90:	9e 85       	ldd	r25, Y+14	; 0x0e
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	4a e7       	ldi	r20, 0x7A	; 122
     f98:	53 e4       	ldi	r21, 0x43	; 67
     f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	8f 83       	std	Y+7, r24	; 0x07
     fa4:	98 87       	std	Y+8, r25	; 0x08
     fa6:	a9 87       	std	Y+9, r26	; 0x09
     fa8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     faa:	6f 81       	ldd	r22, Y+7	; 0x07
     fac:	78 85       	ldd	r23, Y+8	; 0x08
     fae:	89 85       	ldd	r24, Y+9	; 0x09
     fb0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	40 e8       	ldi	r20, 0x80	; 128
     fb8:	5f e3       	ldi	r21, 0x3F	; 63
     fba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fbe:	88 23       	and	r24, r24
     fc0:	2c f4       	brge	.+10     	; 0xfcc <LCD_init+0x8e>
		__ticks = 1;
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	9e 83       	std	Y+6, r25	; 0x06
     fc8:	8d 83       	std	Y+5, r24	; 0x05
     fca:	3f c0       	rjmp	.+126    	; 0x104a <LCD_init+0x10c>
	else if (__tmp > 65535)
     fcc:	6f 81       	ldd	r22, Y+7	; 0x07
     fce:	78 85       	ldd	r23, Y+8	; 0x08
     fd0:	89 85       	ldd	r24, Y+9	; 0x09
     fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	3f ef       	ldi	r19, 0xFF	; 255
     fd8:	4f e7       	ldi	r20, 0x7F	; 127
     fda:	57 e4       	ldi	r21, 0x47	; 71
     fdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fe0:	18 16       	cp	r1, r24
     fe2:	4c f5       	brge	.+82     	; 0x1036 <LCD_init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fe4:	6b 85       	ldd	r22, Y+11	; 0x0b
     fe6:	7c 85       	ldd	r23, Y+12	; 0x0c
     fe8:	8d 85       	ldd	r24, Y+13	; 0x0d
     fea:	9e 85       	ldd	r25, Y+14	; 0x0e
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	40 e2       	ldi	r20, 0x20	; 32
     ff2:	51 e4       	ldi	r21, 0x41	; 65
     ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	bc 01       	movw	r22, r24
     ffe:	cd 01       	movw	r24, r26
    1000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	9e 83       	std	Y+6, r25	; 0x06
    100a:	8d 83       	std	Y+5, r24	; 0x05
    100c:	0f c0       	rjmp	.+30     	; 0x102c <LCD_init+0xee>
    100e:	89 e1       	ldi	r24, 0x19	; 25
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	9c 83       	std	Y+4, r25	; 0x04
    1014:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	9c 81       	ldd	r25, Y+4	; 0x04
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	f1 f7       	brne	.-4      	; 0x101a <LCD_init+0xdc>
    101e:	9c 83       	std	Y+4, r25	; 0x04
    1020:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1022:	8d 81       	ldd	r24, Y+5	; 0x05
    1024:	9e 81       	ldd	r25, Y+6	; 0x06
    1026:	01 97       	sbiw	r24, 0x01	; 1
    1028:	9e 83       	std	Y+6, r25	; 0x06
    102a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    102c:	8d 81       	ldd	r24, Y+5	; 0x05
    102e:	9e 81       	ldd	r25, Y+6	; 0x06
    1030:	00 97       	sbiw	r24, 0x00	; 0
    1032:	69 f7       	brne	.-38     	; 0x100e <LCD_init+0xd0>
    1034:	14 c0       	rjmp	.+40     	; 0x105e <LCD_init+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1036:	6f 81       	ldd	r22, Y+7	; 0x07
    1038:	78 85       	ldd	r23, Y+8	; 0x08
    103a:	89 85       	ldd	r24, Y+9	; 0x09
    103c:	9a 85       	ldd	r25, Y+10	; 0x0a
    103e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1042:	dc 01       	movw	r26, r24
    1044:	cb 01       	movw	r24, r22
    1046:	9e 83       	std	Y+6, r25	; 0x06
    1048:	8d 83       	std	Y+5, r24	; 0x05
    104a:	8d 81       	ldd	r24, Y+5	; 0x05
    104c:	9e 81       	ldd	r25, Y+6	; 0x06
    104e:	9a 83       	std	Y+2, r25	; 0x02
    1050:	89 83       	std	Y+1, r24	; 0x01
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	9a 81       	ldd	r25, Y+2	; 0x02
    1056:	01 97       	sbiw	r24, 0x01	; 1
    1058:	f1 f7       	brne	.-4      	; 0x1056 <LCD_init+0x118>
    105a:	9a 83       	std	Y+2, r25	; 0x02
    105c:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    105e:	82 e0       	ldi	r24, 0x02	; 2
    1060:	6f ef       	ldi	r22, 0xFF	; 255
    1062:	0e 94 54 10 	call	0x20a8	; 0x20a8 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1066:	88 e3       	ldi	r24, 0x38	; 56
    1068:	0e 94 45 08 	call	0x108a	; 0x108a <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    106c:	8c e0       	ldi	r24, 0x0C	; 12
    106e:	0e 94 45 08 	call	0x108a	; 0x108a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	0e 94 45 08 	call	0x108a	; 0x108a <LCD_sendCommand>
}
    1078:	2e 96       	adiw	r28, 0x0e	; 14
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	de bf       	out	0x3e, r29	; 62
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	cd bf       	out	0x3d, r28	; 61
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	08 95       	ret

0000108a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	e9 97       	sbiw	r28, 0x39	; 57
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	de bf       	out	0x3e, r29	; 62
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	cd bf       	out	0x3d, r28	; 61
    109e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    10a0:	83 e0       	ldi	r24, 0x03	; 3
    10a2:	65 e0       	ldi	r22, 0x05	; 5
    10a4:	40 e0       	ldi	r20, 0x00	; 0
    10a6:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <GPIO_writePin>
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	a0 e8       	ldi	r26, 0x80	; 128
    10b0:	bf e3       	ldi	r27, 0x3F	; 63
    10b2:	8d ab       	std	Y+53, r24	; 0x35
    10b4:	9e ab       	std	Y+54, r25	; 0x36
    10b6:	af ab       	std	Y+55, r26	; 0x37
    10b8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ba:	6d a9       	ldd	r22, Y+53	; 0x35
    10bc:	7e a9       	ldd	r23, Y+54	; 0x36
    10be:	8f a9       	ldd	r24, Y+55	; 0x37
    10c0:	98 ad       	ldd	r25, Y+56	; 0x38
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	4a e7       	ldi	r20, 0x7A	; 122
    10c8:	53 e4       	ldi	r21, 0x43	; 67
    10ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ce:	dc 01       	movw	r26, r24
    10d0:	cb 01       	movw	r24, r22
    10d2:	89 ab       	std	Y+49, r24	; 0x31
    10d4:	9a ab       	std	Y+50, r25	; 0x32
    10d6:	ab ab       	std	Y+51, r26	; 0x33
    10d8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    10da:	69 a9       	ldd	r22, Y+49	; 0x31
    10dc:	7a a9       	ldd	r23, Y+50	; 0x32
    10de:	8b a9       	ldd	r24, Y+51	; 0x33
    10e0:	9c a9       	ldd	r25, Y+52	; 0x34
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	40 e8       	ldi	r20, 0x80	; 128
    10e8:	5f e3       	ldi	r21, 0x3F	; 63
    10ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10ee:	88 23       	and	r24, r24
    10f0:	2c f4       	brge	.+10     	; 0x10fc <LCD_sendCommand+0x72>
		__ticks = 1;
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	98 ab       	std	Y+48, r25	; 0x30
    10f8:	8f a7       	std	Y+47, r24	; 0x2f
    10fa:	3f c0       	rjmp	.+126    	; 0x117a <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    10fc:	69 a9       	ldd	r22, Y+49	; 0x31
    10fe:	7a a9       	ldd	r23, Y+50	; 0x32
    1100:	8b a9       	ldd	r24, Y+51	; 0x33
    1102:	9c a9       	ldd	r25, Y+52	; 0x34
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	3f ef       	ldi	r19, 0xFF	; 255
    1108:	4f e7       	ldi	r20, 0x7F	; 127
    110a:	57 e4       	ldi	r21, 0x47	; 71
    110c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1110:	18 16       	cp	r1, r24
    1112:	4c f5       	brge	.+82     	; 0x1166 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1114:	6d a9       	ldd	r22, Y+53	; 0x35
    1116:	7e a9       	ldd	r23, Y+54	; 0x36
    1118:	8f a9       	ldd	r24, Y+55	; 0x37
    111a:	98 ad       	ldd	r25, Y+56	; 0x38
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	40 e2       	ldi	r20, 0x20	; 32
    1122:	51 e4       	ldi	r21, 0x41	; 65
    1124:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1128:	dc 01       	movw	r26, r24
    112a:	cb 01       	movw	r24, r22
    112c:	bc 01       	movw	r22, r24
    112e:	cd 01       	movw	r24, r26
    1130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1134:	dc 01       	movw	r26, r24
    1136:	cb 01       	movw	r24, r22
    1138:	98 ab       	std	Y+48, r25	; 0x30
    113a:	8f a7       	std	Y+47, r24	; 0x2f
    113c:	0f c0       	rjmp	.+30     	; 0x115c <LCD_sendCommand+0xd2>
    113e:	89 e1       	ldi	r24, 0x19	; 25
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	9e a7       	std	Y+46, r25	; 0x2e
    1144:	8d a7       	std	Y+45, r24	; 0x2d
    1146:	8d a5       	ldd	r24, Y+45	; 0x2d
    1148:	9e a5       	ldd	r25, Y+46	; 0x2e
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	f1 f7       	brne	.-4      	; 0x114a <LCD_sendCommand+0xc0>
    114e:	9e a7       	std	Y+46, r25	; 0x2e
    1150:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1152:	8f a5       	ldd	r24, Y+47	; 0x2f
    1154:	98 a9       	ldd	r25, Y+48	; 0x30
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	98 ab       	std	Y+48, r25	; 0x30
    115a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    115c:	8f a5       	ldd	r24, Y+47	; 0x2f
    115e:	98 a9       	ldd	r25, Y+48	; 0x30
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	69 f7       	brne	.-38     	; 0x113e <LCD_sendCommand+0xb4>
    1164:	14 c0       	rjmp	.+40     	; 0x118e <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1166:	69 a9       	ldd	r22, Y+49	; 0x31
    1168:	7a a9       	ldd	r23, Y+50	; 0x32
    116a:	8b a9       	ldd	r24, Y+51	; 0x33
    116c:	9c a9       	ldd	r25, Y+52	; 0x34
    116e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1172:	dc 01       	movw	r26, r24
    1174:	cb 01       	movw	r24, r22
    1176:	98 ab       	std	Y+48, r25	; 0x30
    1178:	8f a7       	std	Y+47, r24	; 0x2f
    117a:	8f a5       	ldd	r24, Y+47	; 0x2f
    117c:	98 a9       	ldd	r25, Y+48	; 0x30
    117e:	9c a7       	std	Y+44, r25	; 0x2c
    1180:	8b a7       	std	Y+43, r24	; 0x2b
    1182:	8b a5       	ldd	r24, Y+43	; 0x2b
    1184:	9c a5       	ldd	r25, Y+44	; 0x2c
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	f1 f7       	brne	.-4      	; 0x1186 <LCD_sendCommand+0xfc>
    118a:	9c a7       	std	Y+44, r25	; 0x2c
    118c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    118e:	83 e0       	ldi	r24, 0x03	; 3
    1190:	67 e0       	ldi	r22, 0x07	; 7
    1192:	41 e0       	ldi	r20, 0x01	; 1
    1194:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <GPIO_writePin>
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	a0 e8       	ldi	r26, 0x80	; 128
    119e:	bf e3       	ldi	r27, 0x3F	; 63
    11a0:	8f a3       	std	Y+39, r24	; 0x27
    11a2:	98 a7       	std	Y+40, r25	; 0x28
    11a4:	a9 a7       	std	Y+41, r26	; 0x29
    11a6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11a8:	6f a1       	ldd	r22, Y+39	; 0x27
    11aa:	78 a5       	ldd	r23, Y+40	; 0x28
    11ac:	89 a5       	ldd	r24, Y+41	; 0x29
    11ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	4a e7       	ldi	r20, 0x7A	; 122
    11b6:	53 e4       	ldi	r21, 0x43	; 67
    11b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11bc:	dc 01       	movw	r26, r24
    11be:	cb 01       	movw	r24, r22
    11c0:	8b a3       	std	Y+35, r24	; 0x23
    11c2:	9c a3       	std	Y+36, r25	; 0x24
    11c4:	ad a3       	std	Y+37, r26	; 0x25
    11c6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    11c8:	6b a1       	ldd	r22, Y+35	; 0x23
    11ca:	7c a1       	ldd	r23, Y+36	; 0x24
    11cc:	8d a1       	ldd	r24, Y+37	; 0x25
    11ce:	9e a1       	ldd	r25, Y+38	; 0x26
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	40 e8       	ldi	r20, 0x80	; 128
    11d6:	5f e3       	ldi	r21, 0x3F	; 63
    11d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11dc:	88 23       	and	r24, r24
    11de:	2c f4       	brge	.+10     	; 0x11ea <LCD_sendCommand+0x160>
		__ticks = 1;
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	9a a3       	std	Y+34, r25	; 0x22
    11e6:	89 a3       	std	Y+33, r24	; 0x21
    11e8:	3f c0       	rjmp	.+126    	; 0x1268 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    11ea:	6b a1       	ldd	r22, Y+35	; 0x23
    11ec:	7c a1       	ldd	r23, Y+36	; 0x24
    11ee:	8d a1       	ldd	r24, Y+37	; 0x25
    11f0:	9e a1       	ldd	r25, Y+38	; 0x26
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	3f ef       	ldi	r19, 0xFF	; 255
    11f6:	4f e7       	ldi	r20, 0x7F	; 127
    11f8:	57 e4       	ldi	r21, 0x47	; 71
    11fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11fe:	18 16       	cp	r1, r24
    1200:	4c f5       	brge	.+82     	; 0x1254 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1202:	6f a1       	ldd	r22, Y+39	; 0x27
    1204:	78 a5       	ldd	r23, Y+40	; 0x28
    1206:	89 a5       	ldd	r24, Y+41	; 0x29
    1208:	9a a5       	ldd	r25, Y+42	; 0x2a
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	40 e2       	ldi	r20, 0x20	; 32
    1210:	51 e4       	ldi	r21, 0x41	; 65
    1212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1216:	dc 01       	movw	r26, r24
    1218:	cb 01       	movw	r24, r22
    121a:	bc 01       	movw	r22, r24
    121c:	cd 01       	movw	r24, r26
    121e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1222:	dc 01       	movw	r26, r24
    1224:	cb 01       	movw	r24, r22
    1226:	9a a3       	std	Y+34, r25	; 0x22
    1228:	89 a3       	std	Y+33, r24	; 0x21
    122a:	0f c0       	rjmp	.+30     	; 0x124a <LCD_sendCommand+0x1c0>
    122c:	89 e1       	ldi	r24, 0x19	; 25
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	98 a3       	std	Y+32, r25	; 0x20
    1232:	8f 8f       	std	Y+31, r24	; 0x1f
    1234:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1236:	98 a1       	ldd	r25, Y+32	; 0x20
    1238:	01 97       	sbiw	r24, 0x01	; 1
    123a:	f1 f7       	brne	.-4      	; 0x1238 <LCD_sendCommand+0x1ae>
    123c:	98 a3       	std	Y+32, r25	; 0x20
    123e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1240:	89 a1       	ldd	r24, Y+33	; 0x21
    1242:	9a a1       	ldd	r25, Y+34	; 0x22
    1244:	01 97       	sbiw	r24, 0x01	; 1
    1246:	9a a3       	std	Y+34, r25	; 0x22
    1248:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    124a:	89 a1       	ldd	r24, Y+33	; 0x21
    124c:	9a a1       	ldd	r25, Y+34	; 0x22
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	69 f7       	brne	.-38     	; 0x122c <LCD_sendCommand+0x1a2>
    1252:	14 c0       	rjmp	.+40     	; 0x127c <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1254:	6b a1       	ldd	r22, Y+35	; 0x23
    1256:	7c a1       	ldd	r23, Y+36	; 0x24
    1258:	8d a1       	ldd	r24, Y+37	; 0x25
    125a:	9e a1       	ldd	r25, Y+38	; 0x26
    125c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1260:	dc 01       	movw	r26, r24
    1262:	cb 01       	movw	r24, r22
    1264:	9a a3       	std	Y+34, r25	; 0x22
    1266:	89 a3       	std	Y+33, r24	; 0x21
    1268:	89 a1       	ldd	r24, Y+33	; 0x21
    126a:	9a a1       	ldd	r25, Y+34	; 0x22
    126c:	9e 8f       	std	Y+30, r25	; 0x1e
    126e:	8d 8f       	std	Y+29, r24	; 0x1d
    1270:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1272:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1274:	01 97       	sbiw	r24, 0x01	; 1
    1276:	f1 f7       	brne	.-4      	; 0x1274 <LCD_sendCommand+0x1ea>
    1278:	9e 8f       	std	Y+30, r25	; 0x1e
    127a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    127c:	82 e0       	ldi	r24, 0x02	; 2
    127e:	69 ad       	ldd	r22, Y+57	; 0x39
    1280:	0e 94 98 10 	call	0x2130	; 0x2130 <GPIO_writePort>
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	a0 e8       	ldi	r26, 0x80	; 128
    128a:	bf e3       	ldi	r27, 0x3F	; 63
    128c:	89 8f       	std	Y+25, r24	; 0x19
    128e:	9a 8f       	std	Y+26, r25	; 0x1a
    1290:	ab 8f       	std	Y+27, r26	; 0x1b
    1292:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1294:	69 8d       	ldd	r22, Y+25	; 0x19
    1296:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1298:	8b 8d       	ldd	r24, Y+27	; 0x1b
    129a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	4a e7       	ldi	r20, 0x7A	; 122
    12a2:	53 e4       	ldi	r21, 0x43	; 67
    12a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	8d 8b       	std	Y+21, r24	; 0x15
    12ae:	9e 8b       	std	Y+22, r25	; 0x16
    12b0:	af 8b       	std	Y+23, r26	; 0x17
    12b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12b4:	6d 89       	ldd	r22, Y+21	; 0x15
    12b6:	7e 89       	ldd	r23, Y+22	; 0x16
    12b8:	8f 89       	ldd	r24, Y+23	; 0x17
    12ba:	98 8d       	ldd	r25, Y+24	; 0x18
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	40 e8       	ldi	r20, 0x80	; 128
    12c2:	5f e3       	ldi	r21, 0x3F	; 63
    12c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12c8:	88 23       	and	r24, r24
    12ca:	2c f4       	brge	.+10     	; 0x12d6 <LCD_sendCommand+0x24c>
		__ticks = 1;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	9c 8b       	std	Y+20, r25	; 0x14
    12d2:	8b 8b       	std	Y+19, r24	; 0x13
    12d4:	3f c0       	rjmp	.+126    	; 0x1354 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    12d6:	6d 89       	ldd	r22, Y+21	; 0x15
    12d8:	7e 89       	ldd	r23, Y+22	; 0x16
    12da:	8f 89       	ldd	r24, Y+23	; 0x17
    12dc:	98 8d       	ldd	r25, Y+24	; 0x18
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	3f ef       	ldi	r19, 0xFF	; 255
    12e2:	4f e7       	ldi	r20, 0x7F	; 127
    12e4:	57 e4       	ldi	r21, 0x47	; 71
    12e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12ea:	18 16       	cp	r1, r24
    12ec:	4c f5       	brge	.+82     	; 0x1340 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ee:	69 8d       	ldd	r22, Y+25	; 0x19
    12f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	40 e2       	ldi	r20, 0x20	; 32
    12fc:	51 e4       	ldi	r21, 0x41	; 65
    12fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	bc 01       	movw	r22, r24
    1308:	cd 01       	movw	r24, r26
    130a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	9c 8b       	std	Y+20, r25	; 0x14
    1314:	8b 8b       	std	Y+19, r24	; 0x13
    1316:	0f c0       	rjmp	.+30     	; 0x1336 <LCD_sendCommand+0x2ac>
    1318:	89 e1       	ldi	r24, 0x19	; 25
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	9a 8b       	std	Y+18, r25	; 0x12
    131e:	89 8b       	std	Y+17, r24	; 0x11
    1320:	89 89       	ldd	r24, Y+17	; 0x11
    1322:	9a 89       	ldd	r25, Y+18	; 0x12
    1324:	01 97       	sbiw	r24, 0x01	; 1
    1326:	f1 f7       	brne	.-4      	; 0x1324 <LCD_sendCommand+0x29a>
    1328:	9a 8b       	std	Y+18, r25	; 0x12
    132a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    132c:	8b 89       	ldd	r24, Y+19	; 0x13
    132e:	9c 89       	ldd	r25, Y+20	; 0x14
    1330:	01 97       	sbiw	r24, 0x01	; 1
    1332:	9c 8b       	std	Y+20, r25	; 0x14
    1334:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1336:	8b 89       	ldd	r24, Y+19	; 0x13
    1338:	9c 89       	ldd	r25, Y+20	; 0x14
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	69 f7       	brne	.-38     	; 0x1318 <LCD_sendCommand+0x28e>
    133e:	14 c0       	rjmp	.+40     	; 0x1368 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1340:	6d 89       	ldd	r22, Y+21	; 0x15
    1342:	7e 89       	ldd	r23, Y+22	; 0x16
    1344:	8f 89       	ldd	r24, Y+23	; 0x17
    1346:	98 8d       	ldd	r25, Y+24	; 0x18
    1348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	9c 8b       	std	Y+20, r25	; 0x14
    1352:	8b 8b       	std	Y+19, r24	; 0x13
    1354:	8b 89       	ldd	r24, Y+19	; 0x13
    1356:	9c 89       	ldd	r25, Y+20	; 0x14
    1358:	98 8b       	std	Y+16, r25	; 0x10
    135a:	8f 87       	std	Y+15, r24	; 0x0f
    135c:	8f 85       	ldd	r24, Y+15	; 0x0f
    135e:	98 89       	ldd	r25, Y+16	; 0x10
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	f1 f7       	brne	.-4      	; 0x1360 <LCD_sendCommand+0x2d6>
    1364:	98 8b       	std	Y+16, r25	; 0x10
    1366:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1368:	83 e0       	ldi	r24, 0x03	; 3
    136a:	67 e0       	ldi	r22, 0x07	; 7
    136c:	40 e0       	ldi	r20, 0x00	; 0
    136e:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <GPIO_writePin>
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	a0 e8       	ldi	r26, 0x80	; 128
    1378:	bf e3       	ldi	r27, 0x3F	; 63
    137a:	8b 87       	std	Y+11, r24	; 0x0b
    137c:	9c 87       	std	Y+12, r25	; 0x0c
    137e:	ad 87       	std	Y+13, r26	; 0x0d
    1380:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1382:	6b 85       	ldd	r22, Y+11	; 0x0b
    1384:	7c 85       	ldd	r23, Y+12	; 0x0c
    1386:	8d 85       	ldd	r24, Y+13	; 0x0d
    1388:	9e 85       	ldd	r25, Y+14	; 0x0e
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	4a e7       	ldi	r20, 0x7A	; 122
    1390:	53 e4       	ldi	r21, 0x43	; 67
    1392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	8f 83       	std	Y+7, r24	; 0x07
    139c:	98 87       	std	Y+8, r25	; 0x08
    139e:	a9 87       	std	Y+9, r26	; 0x09
    13a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13a2:	6f 81       	ldd	r22, Y+7	; 0x07
    13a4:	78 85       	ldd	r23, Y+8	; 0x08
    13a6:	89 85       	ldd	r24, Y+9	; 0x09
    13a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	40 e8       	ldi	r20, 0x80	; 128
    13b0:	5f e3       	ldi	r21, 0x3F	; 63
    13b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13b6:	88 23       	and	r24, r24
    13b8:	2c f4       	brge	.+10     	; 0x13c4 <LCD_sendCommand+0x33a>
		__ticks = 1;
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	9e 83       	std	Y+6, r25	; 0x06
    13c0:	8d 83       	std	Y+5, r24	; 0x05
    13c2:	3f c0       	rjmp	.+126    	; 0x1442 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    13c4:	6f 81       	ldd	r22, Y+7	; 0x07
    13c6:	78 85       	ldd	r23, Y+8	; 0x08
    13c8:	89 85       	ldd	r24, Y+9	; 0x09
    13ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	3f ef       	ldi	r19, 0xFF	; 255
    13d0:	4f e7       	ldi	r20, 0x7F	; 127
    13d2:	57 e4       	ldi	r21, 0x47	; 71
    13d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13d8:	18 16       	cp	r1, r24
    13da:	4c f5       	brge	.+82     	; 0x142e <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    13de:	7c 85       	ldd	r23, Y+12	; 0x0c
    13e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    13e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	40 e2       	ldi	r20, 0x20	; 32
    13ea:	51 e4       	ldi	r21, 0x41	; 65
    13ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f0:	dc 01       	movw	r26, r24
    13f2:	cb 01       	movw	r24, r22
    13f4:	bc 01       	movw	r22, r24
    13f6:	cd 01       	movw	r24, r26
    13f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13fc:	dc 01       	movw	r26, r24
    13fe:	cb 01       	movw	r24, r22
    1400:	9e 83       	std	Y+6, r25	; 0x06
    1402:	8d 83       	std	Y+5, r24	; 0x05
    1404:	0f c0       	rjmp	.+30     	; 0x1424 <LCD_sendCommand+0x39a>
    1406:	89 e1       	ldi	r24, 0x19	; 25
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	9c 83       	std	Y+4, r25	; 0x04
    140c:	8b 83       	std	Y+3, r24	; 0x03
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	9c 81       	ldd	r25, Y+4	; 0x04
    1412:	01 97       	sbiw	r24, 0x01	; 1
    1414:	f1 f7       	brne	.-4      	; 0x1412 <LCD_sendCommand+0x388>
    1416:	9c 83       	std	Y+4, r25	; 0x04
    1418:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    141a:	8d 81       	ldd	r24, Y+5	; 0x05
    141c:	9e 81       	ldd	r25, Y+6	; 0x06
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	9e 83       	std	Y+6, r25	; 0x06
    1422:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1424:	8d 81       	ldd	r24, Y+5	; 0x05
    1426:	9e 81       	ldd	r25, Y+6	; 0x06
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	69 f7       	brne	.-38     	; 0x1406 <LCD_sendCommand+0x37c>
    142c:	14 c0       	rjmp	.+40     	; 0x1456 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    142e:	6f 81       	ldd	r22, Y+7	; 0x07
    1430:	78 85       	ldd	r23, Y+8	; 0x08
    1432:	89 85       	ldd	r24, Y+9	; 0x09
    1434:	9a 85       	ldd	r25, Y+10	; 0x0a
    1436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    143a:	dc 01       	movw	r26, r24
    143c:	cb 01       	movw	r24, r22
    143e:	9e 83       	std	Y+6, r25	; 0x06
    1440:	8d 83       	std	Y+5, r24	; 0x05
    1442:	8d 81       	ldd	r24, Y+5	; 0x05
    1444:	9e 81       	ldd	r25, Y+6	; 0x06
    1446:	9a 83       	std	Y+2, r25	; 0x02
    1448:	89 83       	std	Y+1, r24	; 0x01
    144a:	89 81       	ldd	r24, Y+1	; 0x01
    144c:	9a 81       	ldd	r25, Y+2	; 0x02
    144e:	01 97       	sbiw	r24, 0x01	; 1
    1450:	f1 f7       	brne	.-4      	; 0x144e <LCD_sendCommand+0x3c4>
    1452:	9a 83       	std	Y+2, r25	; 0x02
    1454:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1456:	e9 96       	adiw	r28, 0x39	; 57
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	f8 94       	cli
    145c:	de bf       	out	0x3e, r29	; 62
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	cd bf       	out	0x3d, r28	; 61
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	08 95       	ret

00001468 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
    1470:	e9 97       	sbiw	r28, 0x39	; 57
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	f8 94       	cli
    1476:	de bf       	out	0x3e, r29	; 62
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	cd bf       	out	0x3d, r28	; 61
    147c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    147e:	83 e0       	ldi	r24, 0x03	; 3
    1480:	65 e0       	ldi	r22, 0x05	; 5
    1482:	41 e0       	ldi	r20, 0x01	; 1
    1484:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <GPIO_writePin>
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	a0 e8       	ldi	r26, 0x80	; 128
    148e:	bf e3       	ldi	r27, 0x3F	; 63
    1490:	8d ab       	std	Y+53, r24	; 0x35
    1492:	9e ab       	std	Y+54, r25	; 0x36
    1494:	af ab       	std	Y+55, r26	; 0x37
    1496:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1498:	6d a9       	ldd	r22, Y+53	; 0x35
    149a:	7e a9       	ldd	r23, Y+54	; 0x36
    149c:	8f a9       	ldd	r24, Y+55	; 0x37
    149e:	98 ad       	ldd	r25, Y+56	; 0x38
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	4a e7       	ldi	r20, 0x7A	; 122
    14a6:	53 e4       	ldi	r21, 0x43	; 67
    14a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	89 ab       	std	Y+49, r24	; 0x31
    14b2:	9a ab       	std	Y+50, r25	; 0x32
    14b4:	ab ab       	std	Y+51, r26	; 0x33
    14b6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14b8:	69 a9       	ldd	r22, Y+49	; 0x31
    14ba:	7a a9       	ldd	r23, Y+50	; 0x32
    14bc:	8b a9       	ldd	r24, Y+51	; 0x33
    14be:	9c a9       	ldd	r25, Y+52	; 0x34
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	40 e8       	ldi	r20, 0x80	; 128
    14c6:	5f e3       	ldi	r21, 0x3F	; 63
    14c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14cc:	88 23       	and	r24, r24
    14ce:	2c f4       	brge	.+10     	; 0x14da <LCD_displayCharacter+0x72>
		__ticks = 1;
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	98 ab       	std	Y+48, r25	; 0x30
    14d6:	8f a7       	std	Y+47, r24	; 0x2f
    14d8:	3f c0       	rjmp	.+126    	; 0x1558 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    14da:	69 a9       	ldd	r22, Y+49	; 0x31
    14dc:	7a a9       	ldd	r23, Y+50	; 0x32
    14de:	8b a9       	ldd	r24, Y+51	; 0x33
    14e0:	9c a9       	ldd	r25, Y+52	; 0x34
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	3f ef       	ldi	r19, 0xFF	; 255
    14e6:	4f e7       	ldi	r20, 0x7F	; 127
    14e8:	57 e4       	ldi	r21, 0x47	; 71
    14ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14ee:	18 16       	cp	r1, r24
    14f0:	4c f5       	brge	.+82     	; 0x1544 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14f2:	6d a9       	ldd	r22, Y+53	; 0x35
    14f4:	7e a9       	ldd	r23, Y+54	; 0x36
    14f6:	8f a9       	ldd	r24, Y+55	; 0x37
    14f8:	98 ad       	ldd	r25, Y+56	; 0x38
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	40 e2       	ldi	r20, 0x20	; 32
    1500:	51 e4       	ldi	r21, 0x41	; 65
    1502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	bc 01       	movw	r22, r24
    150c:	cd 01       	movw	r24, r26
    150e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1512:	dc 01       	movw	r26, r24
    1514:	cb 01       	movw	r24, r22
    1516:	98 ab       	std	Y+48, r25	; 0x30
    1518:	8f a7       	std	Y+47, r24	; 0x2f
    151a:	0f c0       	rjmp	.+30     	; 0x153a <LCD_displayCharacter+0xd2>
    151c:	89 e1       	ldi	r24, 0x19	; 25
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	9e a7       	std	Y+46, r25	; 0x2e
    1522:	8d a7       	std	Y+45, r24	; 0x2d
    1524:	8d a5       	ldd	r24, Y+45	; 0x2d
    1526:	9e a5       	ldd	r25, Y+46	; 0x2e
    1528:	01 97       	sbiw	r24, 0x01	; 1
    152a:	f1 f7       	brne	.-4      	; 0x1528 <LCD_displayCharacter+0xc0>
    152c:	9e a7       	std	Y+46, r25	; 0x2e
    152e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1530:	8f a5       	ldd	r24, Y+47	; 0x2f
    1532:	98 a9       	ldd	r25, Y+48	; 0x30
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	98 ab       	std	Y+48, r25	; 0x30
    1538:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    153a:	8f a5       	ldd	r24, Y+47	; 0x2f
    153c:	98 a9       	ldd	r25, Y+48	; 0x30
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	69 f7       	brne	.-38     	; 0x151c <LCD_displayCharacter+0xb4>
    1542:	14 c0       	rjmp	.+40     	; 0x156c <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1544:	69 a9       	ldd	r22, Y+49	; 0x31
    1546:	7a a9       	ldd	r23, Y+50	; 0x32
    1548:	8b a9       	ldd	r24, Y+51	; 0x33
    154a:	9c a9       	ldd	r25, Y+52	; 0x34
    154c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1550:	dc 01       	movw	r26, r24
    1552:	cb 01       	movw	r24, r22
    1554:	98 ab       	std	Y+48, r25	; 0x30
    1556:	8f a7       	std	Y+47, r24	; 0x2f
    1558:	8f a5       	ldd	r24, Y+47	; 0x2f
    155a:	98 a9       	ldd	r25, Y+48	; 0x30
    155c:	9c a7       	std	Y+44, r25	; 0x2c
    155e:	8b a7       	std	Y+43, r24	; 0x2b
    1560:	8b a5       	ldd	r24, Y+43	; 0x2b
    1562:	9c a5       	ldd	r25, Y+44	; 0x2c
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	f1 f7       	brne	.-4      	; 0x1564 <LCD_displayCharacter+0xfc>
    1568:	9c a7       	std	Y+44, r25	; 0x2c
    156a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    156c:	83 e0       	ldi	r24, 0x03	; 3
    156e:	67 e0       	ldi	r22, 0x07	; 7
    1570:	41 e0       	ldi	r20, 0x01	; 1
    1572:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <GPIO_writePin>
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	a0 e8       	ldi	r26, 0x80	; 128
    157c:	bf e3       	ldi	r27, 0x3F	; 63
    157e:	8f a3       	std	Y+39, r24	; 0x27
    1580:	98 a7       	std	Y+40, r25	; 0x28
    1582:	a9 a7       	std	Y+41, r26	; 0x29
    1584:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1586:	6f a1       	ldd	r22, Y+39	; 0x27
    1588:	78 a5       	ldd	r23, Y+40	; 0x28
    158a:	89 a5       	ldd	r24, Y+41	; 0x29
    158c:	9a a5       	ldd	r25, Y+42	; 0x2a
    158e:	20 e0       	ldi	r18, 0x00	; 0
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	4a e7       	ldi	r20, 0x7A	; 122
    1594:	53 e4       	ldi	r21, 0x43	; 67
    1596:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	8b a3       	std	Y+35, r24	; 0x23
    15a0:	9c a3       	std	Y+36, r25	; 0x24
    15a2:	ad a3       	std	Y+37, r26	; 0x25
    15a4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15a6:	6b a1       	ldd	r22, Y+35	; 0x23
    15a8:	7c a1       	ldd	r23, Y+36	; 0x24
    15aa:	8d a1       	ldd	r24, Y+37	; 0x25
    15ac:	9e a1       	ldd	r25, Y+38	; 0x26
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	40 e8       	ldi	r20, 0x80	; 128
    15b4:	5f e3       	ldi	r21, 0x3F	; 63
    15b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15ba:	88 23       	and	r24, r24
    15bc:	2c f4       	brge	.+10     	; 0x15c8 <LCD_displayCharacter+0x160>
		__ticks = 1;
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	9a a3       	std	Y+34, r25	; 0x22
    15c4:	89 a3       	std	Y+33, r24	; 0x21
    15c6:	3f c0       	rjmp	.+126    	; 0x1646 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    15c8:	6b a1       	ldd	r22, Y+35	; 0x23
    15ca:	7c a1       	ldd	r23, Y+36	; 0x24
    15cc:	8d a1       	ldd	r24, Y+37	; 0x25
    15ce:	9e a1       	ldd	r25, Y+38	; 0x26
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	3f ef       	ldi	r19, 0xFF	; 255
    15d4:	4f e7       	ldi	r20, 0x7F	; 127
    15d6:	57 e4       	ldi	r21, 0x47	; 71
    15d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15dc:	18 16       	cp	r1, r24
    15de:	4c f5       	brge	.+82     	; 0x1632 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e0:	6f a1       	ldd	r22, Y+39	; 0x27
    15e2:	78 a5       	ldd	r23, Y+40	; 0x28
    15e4:	89 a5       	ldd	r24, Y+41	; 0x29
    15e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    15e8:	20 e0       	ldi	r18, 0x00	; 0
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	40 e2       	ldi	r20, 0x20	; 32
    15ee:	51 e4       	ldi	r21, 0x41	; 65
    15f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f4:	dc 01       	movw	r26, r24
    15f6:	cb 01       	movw	r24, r22
    15f8:	bc 01       	movw	r22, r24
    15fa:	cd 01       	movw	r24, r26
    15fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1600:	dc 01       	movw	r26, r24
    1602:	cb 01       	movw	r24, r22
    1604:	9a a3       	std	Y+34, r25	; 0x22
    1606:	89 a3       	std	Y+33, r24	; 0x21
    1608:	0f c0       	rjmp	.+30     	; 0x1628 <LCD_displayCharacter+0x1c0>
    160a:	89 e1       	ldi	r24, 0x19	; 25
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	98 a3       	std	Y+32, r25	; 0x20
    1610:	8f 8f       	std	Y+31, r24	; 0x1f
    1612:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1614:	98 a1       	ldd	r25, Y+32	; 0x20
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	f1 f7       	brne	.-4      	; 0x1616 <LCD_displayCharacter+0x1ae>
    161a:	98 a3       	std	Y+32, r25	; 0x20
    161c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    161e:	89 a1       	ldd	r24, Y+33	; 0x21
    1620:	9a a1       	ldd	r25, Y+34	; 0x22
    1622:	01 97       	sbiw	r24, 0x01	; 1
    1624:	9a a3       	std	Y+34, r25	; 0x22
    1626:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1628:	89 a1       	ldd	r24, Y+33	; 0x21
    162a:	9a a1       	ldd	r25, Y+34	; 0x22
    162c:	00 97       	sbiw	r24, 0x00	; 0
    162e:	69 f7       	brne	.-38     	; 0x160a <LCD_displayCharacter+0x1a2>
    1630:	14 c0       	rjmp	.+40     	; 0x165a <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1632:	6b a1       	ldd	r22, Y+35	; 0x23
    1634:	7c a1       	ldd	r23, Y+36	; 0x24
    1636:	8d a1       	ldd	r24, Y+37	; 0x25
    1638:	9e a1       	ldd	r25, Y+38	; 0x26
    163a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	9a a3       	std	Y+34, r25	; 0x22
    1644:	89 a3       	std	Y+33, r24	; 0x21
    1646:	89 a1       	ldd	r24, Y+33	; 0x21
    1648:	9a a1       	ldd	r25, Y+34	; 0x22
    164a:	9e 8f       	std	Y+30, r25	; 0x1e
    164c:	8d 8f       	std	Y+29, r24	; 0x1d
    164e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1650:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1652:	01 97       	sbiw	r24, 0x01	; 1
    1654:	f1 f7       	brne	.-4      	; 0x1652 <LCD_displayCharacter+0x1ea>
    1656:	9e 8f       	std	Y+30, r25	; 0x1e
    1658:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    165a:	82 e0       	ldi	r24, 0x02	; 2
    165c:	69 ad       	ldd	r22, Y+57	; 0x39
    165e:	0e 94 98 10 	call	0x2130	; 0x2130 <GPIO_writePort>
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	a0 e8       	ldi	r26, 0x80	; 128
    1668:	bf e3       	ldi	r27, 0x3F	; 63
    166a:	89 8f       	std	Y+25, r24	; 0x19
    166c:	9a 8f       	std	Y+26, r25	; 0x1a
    166e:	ab 8f       	std	Y+27, r26	; 0x1b
    1670:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1672:	69 8d       	ldd	r22, Y+25	; 0x19
    1674:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1676:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1678:	9c 8d       	ldd	r25, Y+28	; 0x1c
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	4a e7       	ldi	r20, 0x7A	; 122
    1680:	53 e4       	ldi	r21, 0x43	; 67
    1682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1686:	dc 01       	movw	r26, r24
    1688:	cb 01       	movw	r24, r22
    168a:	8d 8b       	std	Y+21, r24	; 0x15
    168c:	9e 8b       	std	Y+22, r25	; 0x16
    168e:	af 8b       	std	Y+23, r26	; 0x17
    1690:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1692:	6d 89       	ldd	r22, Y+21	; 0x15
    1694:	7e 89       	ldd	r23, Y+22	; 0x16
    1696:	8f 89       	ldd	r24, Y+23	; 0x17
    1698:	98 8d       	ldd	r25, Y+24	; 0x18
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	40 e8       	ldi	r20, 0x80	; 128
    16a0:	5f e3       	ldi	r21, 0x3F	; 63
    16a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16a6:	88 23       	and	r24, r24
    16a8:	2c f4       	brge	.+10     	; 0x16b4 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	9c 8b       	std	Y+20, r25	; 0x14
    16b0:	8b 8b       	std	Y+19, r24	; 0x13
    16b2:	3f c0       	rjmp	.+126    	; 0x1732 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    16b4:	6d 89       	ldd	r22, Y+21	; 0x15
    16b6:	7e 89       	ldd	r23, Y+22	; 0x16
    16b8:	8f 89       	ldd	r24, Y+23	; 0x17
    16ba:	98 8d       	ldd	r25, Y+24	; 0x18
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	3f ef       	ldi	r19, 0xFF	; 255
    16c0:	4f e7       	ldi	r20, 0x7F	; 127
    16c2:	57 e4       	ldi	r21, 0x47	; 71
    16c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16c8:	18 16       	cp	r1, r24
    16ca:	4c f5       	brge	.+82     	; 0x171e <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16cc:	69 8d       	ldd	r22, Y+25	; 0x19
    16ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	40 e2       	ldi	r20, 0x20	; 32
    16da:	51 e4       	ldi	r21, 0x41	; 65
    16dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	bc 01       	movw	r22, r24
    16e6:	cd 01       	movw	r24, r26
    16e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	9c 8b       	std	Y+20, r25	; 0x14
    16f2:	8b 8b       	std	Y+19, r24	; 0x13
    16f4:	0f c0       	rjmp	.+30     	; 0x1714 <LCD_displayCharacter+0x2ac>
    16f6:	89 e1       	ldi	r24, 0x19	; 25
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	9a 8b       	std	Y+18, r25	; 0x12
    16fc:	89 8b       	std	Y+17, r24	; 0x11
    16fe:	89 89       	ldd	r24, Y+17	; 0x11
    1700:	9a 89       	ldd	r25, Y+18	; 0x12
    1702:	01 97       	sbiw	r24, 0x01	; 1
    1704:	f1 f7       	brne	.-4      	; 0x1702 <LCD_displayCharacter+0x29a>
    1706:	9a 8b       	std	Y+18, r25	; 0x12
    1708:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    170a:	8b 89       	ldd	r24, Y+19	; 0x13
    170c:	9c 89       	ldd	r25, Y+20	; 0x14
    170e:	01 97       	sbiw	r24, 0x01	; 1
    1710:	9c 8b       	std	Y+20, r25	; 0x14
    1712:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1714:	8b 89       	ldd	r24, Y+19	; 0x13
    1716:	9c 89       	ldd	r25, Y+20	; 0x14
    1718:	00 97       	sbiw	r24, 0x00	; 0
    171a:	69 f7       	brne	.-38     	; 0x16f6 <LCD_displayCharacter+0x28e>
    171c:	14 c0       	rjmp	.+40     	; 0x1746 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    171e:	6d 89       	ldd	r22, Y+21	; 0x15
    1720:	7e 89       	ldd	r23, Y+22	; 0x16
    1722:	8f 89       	ldd	r24, Y+23	; 0x17
    1724:	98 8d       	ldd	r25, Y+24	; 0x18
    1726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	9c 8b       	std	Y+20, r25	; 0x14
    1730:	8b 8b       	std	Y+19, r24	; 0x13
    1732:	8b 89       	ldd	r24, Y+19	; 0x13
    1734:	9c 89       	ldd	r25, Y+20	; 0x14
    1736:	98 8b       	std	Y+16, r25	; 0x10
    1738:	8f 87       	std	Y+15, r24	; 0x0f
    173a:	8f 85       	ldd	r24, Y+15	; 0x0f
    173c:	98 89       	ldd	r25, Y+16	; 0x10
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	f1 f7       	brne	.-4      	; 0x173e <LCD_displayCharacter+0x2d6>
    1742:	98 8b       	std	Y+16, r25	; 0x10
    1744:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1746:	83 e0       	ldi	r24, 0x03	; 3
    1748:	67 e0       	ldi	r22, 0x07	; 7
    174a:	40 e0       	ldi	r20, 0x00	; 0
    174c:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <GPIO_writePin>
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	a0 e8       	ldi	r26, 0x80	; 128
    1756:	bf e3       	ldi	r27, 0x3F	; 63
    1758:	8b 87       	std	Y+11, r24	; 0x0b
    175a:	9c 87       	std	Y+12, r25	; 0x0c
    175c:	ad 87       	std	Y+13, r26	; 0x0d
    175e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1760:	6b 85       	ldd	r22, Y+11	; 0x0b
    1762:	7c 85       	ldd	r23, Y+12	; 0x0c
    1764:	8d 85       	ldd	r24, Y+13	; 0x0d
    1766:	9e 85       	ldd	r25, Y+14	; 0x0e
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	4a e7       	ldi	r20, 0x7A	; 122
    176e:	53 e4       	ldi	r21, 0x43	; 67
    1770:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	8f 83       	std	Y+7, r24	; 0x07
    177a:	98 87       	std	Y+8, r25	; 0x08
    177c:	a9 87       	std	Y+9, r26	; 0x09
    177e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1780:	6f 81       	ldd	r22, Y+7	; 0x07
    1782:	78 85       	ldd	r23, Y+8	; 0x08
    1784:	89 85       	ldd	r24, Y+9	; 0x09
    1786:	9a 85       	ldd	r25, Y+10	; 0x0a
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	40 e8       	ldi	r20, 0x80	; 128
    178e:	5f e3       	ldi	r21, 0x3F	; 63
    1790:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1794:	88 23       	and	r24, r24
    1796:	2c f4       	brge	.+10     	; 0x17a2 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	9e 83       	std	Y+6, r25	; 0x06
    179e:	8d 83       	std	Y+5, r24	; 0x05
    17a0:	3f c0       	rjmp	.+126    	; 0x1820 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    17a2:	6f 81       	ldd	r22, Y+7	; 0x07
    17a4:	78 85       	ldd	r23, Y+8	; 0x08
    17a6:	89 85       	ldd	r24, Y+9	; 0x09
    17a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	3f ef       	ldi	r19, 0xFF	; 255
    17ae:	4f e7       	ldi	r20, 0x7F	; 127
    17b0:	57 e4       	ldi	r21, 0x47	; 71
    17b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17b6:	18 16       	cp	r1, r24
    17b8:	4c f5       	brge	.+82     	; 0x180c <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    17bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    17be:	8d 85       	ldd	r24, Y+13	; 0x0d
    17c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	40 e2       	ldi	r20, 0x20	; 32
    17c8:	51 e4       	ldi	r21, 0x41	; 65
    17ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ce:	dc 01       	movw	r26, r24
    17d0:	cb 01       	movw	r24, r22
    17d2:	bc 01       	movw	r22, r24
    17d4:	cd 01       	movw	r24, r26
    17d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17da:	dc 01       	movw	r26, r24
    17dc:	cb 01       	movw	r24, r22
    17de:	9e 83       	std	Y+6, r25	; 0x06
    17e0:	8d 83       	std	Y+5, r24	; 0x05
    17e2:	0f c0       	rjmp	.+30     	; 0x1802 <LCD_displayCharacter+0x39a>
    17e4:	89 e1       	ldi	r24, 0x19	; 25
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	9c 83       	std	Y+4, r25	; 0x04
    17ea:	8b 83       	std	Y+3, r24	; 0x03
    17ec:	8b 81       	ldd	r24, Y+3	; 0x03
    17ee:	9c 81       	ldd	r25, Y+4	; 0x04
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	f1 f7       	brne	.-4      	; 0x17f0 <LCD_displayCharacter+0x388>
    17f4:	9c 83       	std	Y+4, r25	; 0x04
    17f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17f8:	8d 81       	ldd	r24, Y+5	; 0x05
    17fa:	9e 81       	ldd	r25, Y+6	; 0x06
    17fc:	01 97       	sbiw	r24, 0x01	; 1
    17fe:	9e 83       	std	Y+6, r25	; 0x06
    1800:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1802:	8d 81       	ldd	r24, Y+5	; 0x05
    1804:	9e 81       	ldd	r25, Y+6	; 0x06
    1806:	00 97       	sbiw	r24, 0x00	; 0
    1808:	69 f7       	brne	.-38     	; 0x17e4 <LCD_displayCharacter+0x37c>
    180a:	14 c0       	rjmp	.+40     	; 0x1834 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    180c:	6f 81       	ldd	r22, Y+7	; 0x07
    180e:	78 85       	ldd	r23, Y+8	; 0x08
    1810:	89 85       	ldd	r24, Y+9	; 0x09
    1812:	9a 85       	ldd	r25, Y+10	; 0x0a
    1814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1818:	dc 01       	movw	r26, r24
    181a:	cb 01       	movw	r24, r22
    181c:	9e 83       	std	Y+6, r25	; 0x06
    181e:	8d 83       	std	Y+5, r24	; 0x05
    1820:	8d 81       	ldd	r24, Y+5	; 0x05
    1822:	9e 81       	ldd	r25, Y+6	; 0x06
    1824:	9a 83       	std	Y+2, r25	; 0x02
    1826:	89 83       	std	Y+1, r24	; 0x01
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	9a 81       	ldd	r25, Y+2	; 0x02
    182c:	01 97       	sbiw	r24, 0x01	; 1
    182e:	f1 f7       	brne	.-4      	; 0x182c <LCD_displayCharacter+0x3c4>
    1830:	9a 83       	std	Y+2, r25	; 0x02
    1832:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1834:	e9 96       	adiw	r28, 0x39	; 57
    1836:	0f b6       	in	r0, 0x3f	; 63
    1838:	f8 94       	cli
    183a:	de bf       	out	0x3e, r29	; 62
    183c:	0f be       	out	0x3f, r0	; 63
    183e:	cd bf       	out	0x3d, r28	; 61
    1840:	cf 91       	pop	r28
    1842:	df 91       	pop	r29
    1844:	08 95       	ret

00001846 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1846:	df 93       	push	r29
    1848:	cf 93       	push	r28
    184a:	00 d0       	rcall	.+0      	; 0x184c <LCD_displayString+0x6>
    184c:	0f 92       	push	r0
    184e:	cd b7       	in	r28, 0x3d	; 61
    1850:	de b7       	in	r29, 0x3e	; 62
    1852:	9b 83       	std	Y+3, r25	; 0x03
    1854:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1856:	19 82       	std	Y+1, r1	; 0x01
    1858:	0e c0       	rjmp	.+28     	; 0x1876 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	9b 81       	ldd	r25, Y+3	; 0x03
    1864:	fc 01       	movw	r30, r24
    1866:	e2 0f       	add	r30, r18
    1868:	f3 1f       	adc	r31, r19
    186a:	80 81       	ld	r24, Z
    186c:	0e 94 34 0a 	call	0x1468	; 0x1468 <LCD_displayCharacter>
		i++;
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	8f 5f       	subi	r24, 0xFF	; 255
    1874:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	9b 81       	ldd	r25, Y+3	; 0x03
    1880:	fc 01       	movw	r30, r24
    1882:	e2 0f       	add	r30, r18
    1884:	f3 1f       	adc	r31, r19
    1886:	80 81       	ld	r24, Z
    1888:	88 23       	and	r24, r24
    188a:	39 f7       	brne	.-50     	; 0x185a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	08 95       	ret

00001898 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	00 d0       	rcall	.+0      	; 0x189e <LCD_moveCursor+0x6>
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <LCD_moveCursor+0x8>
    18a0:	0f 92       	push	r0
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
    18a6:	8a 83       	std	Y+2, r24	; 0x02
    18a8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    18aa:	8a 81       	ldd	r24, Y+2	; 0x02
    18ac:	28 2f       	mov	r18, r24
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	3d 83       	std	Y+5, r19	; 0x05
    18b2:	2c 83       	std	Y+4, r18	; 0x04
    18b4:	8c 81       	ldd	r24, Y+4	; 0x04
    18b6:	9d 81       	ldd	r25, Y+5	; 0x05
    18b8:	81 30       	cpi	r24, 0x01	; 1
    18ba:	91 05       	cpc	r25, r1
    18bc:	c1 f0       	breq	.+48     	; 0x18ee <LCD_moveCursor+0x56>
    18be:	2c 81       	ldd	r18, Y+4	; 0x04
    18c0:	3d 81       	ldd	r19, Y+5	; 0x05
    18c2:	22 30       	cpi	r18, 0x02	; 2
    18c4:	31 05       	cpc	r19, r1
    18c6:	2c f4       	brge	.+10     	; 0x18d2 <LCD_moveCursor+0x3a>
    18c8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ca:	9d 81       	ldd	r25, Y+5	; 0x05
    18cc:	00 97       	sbiw	r24, 0x00	; 0
    18ce:	61 f0       	breq	.+24     	; 0x18e8 <LCD_moveCursor+0x50>
    18d0:	19 c0       	rjmp	.+50     	; 0x1904 <LCD_moveCursor+0x6c>
    18d2:	2c 81       	ldd	r18, Y+4	; 0x04
    18d4:	3d 81       	ldd	r19, Y+5	; 0x05
    18d6:	22 30       	cpi	r18, 0x02	; 2
    18d8:	31 05       	cpc	r19, r1
    18da:	69 f0       	breq	.+26     	; 0x18f6 <LCD_moveCursor+0x5e>
    18dc:	8c 81       	ldd	r24, Y+4	; 0x04
    18de:	9d 81       	ldd	r25, Y+5	; 0x05
    18e0:	83 30       	cpi	r24, 0x03	; 3
    18e2:	91 05       	cpc	r25, r1
    18e4:	61 f0       	breq	.+24     	; 0x18fe <LCD_moveCursor+0x66>
    18e6:	0e c0       	rjmp	.+28     	; 0x1904 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	89 83       	std	Y+1, r24	; 0x01
    18ec:	0b c0       	rjmp	.+22     	; 0x1904 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	80 5c       	subi	r24, 0xC0	; 192
    18f2:	89 83       	std	Y+1, r24	; 0x01
    18f4:	07 c0       	rjmp	.+14     	; 0x1904 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    18f6:	8b 81       	ldd	r24, Y+3	; 0x03
    18f8:	80 5f       	subi	r24, 0xF0	; 240
    18fa:	89 83       	std	Y+1, r24	; 0x01
    18fc:	03 c0       	rjmp	.+6      	; 0x1904 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	80 5b       	subi	r24, 0xB0	; 176
    1902:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	80 68       	ori	r24, 0x80	; 128
    1908:	0e 94 45 08 	call	0x108a	; 0x108a <LCD_sendCommand>
}
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	cf 91       	pop	r28
    1918:	df 91       	pop	r29
    191a:	08 95       	ret

0000191c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    191c:	df 93       	push	r29
    191e:	cf 93       	push	r28
    1920:	00 d0       	rcall	.+0      	; 0x1922 <LCD_displayStringRowColumn+0x6>
    1922:	00 d0       	rcall	.+0      	; 0x1924 <LCD_displayStringRowColumn+0x8>
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
    1928:	89 83       	std	Y+1, r24	; 0x01
    192a:	6a 83       	std	Y+2, r22	; 0x02
    192c:	5c 83       	std	Y+4, r21	; 0x04
    192e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	6a 81       	ldd	r22, Y+2	; 0x02
    1934:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1938:	8b 81       	ldd	r24, Y+3	; 0x03
    193a:	9c 81       	ldd	r25, Y+4	; 0x04
    193c:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_displayString>
}
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
    1948:	cf 91       	pop	r28
    194a:	df 91       	pop	r29
    194c:	08 95       	ret

0000194e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    194e:	df 93       	push	r29
    1950:	cf 93       	push	r28
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	62 97       	sbiw	r28, 0x12	; 18
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	f8 94       	cli
    195c:	de bf       	out	0x3e, r29	; 62
    195e:	0f be       	out	0x3f, r0	; 63
    1960:	cd bf       	out	0x3d, r28	; 61
    1962:	9a 8b       	std	Y+18, r25	; 0x12
    1964:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1966:	89 89       	ldd	r24, Y+17	; 0x11
    1968:	9a 89       	ldd	r25, Y+18	; 0x12
    196a:	9e 01       	movw	r18, r28
    196c:	2f 5f       	subi	r18, 0xFF	; 255
    196e:	3f 4f       	sbci	r19, 0xFF	; 255
    1970:	b9 01       	movw	r22, r18
    1972:	4a e0       	ldi	r20, 0x0A	; 10
    1974:	50 e0       	ldi	r21, 0x00	; 0
    1976:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <itoa>
   LCD_displayString(buff); /* Display the string */
    197a:	ce 01       	movw	r24, r28
    197c:	01 96       	adiw	r24, 0x01	; 1
    197e:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_displayString>
}
    1982:	62 96       	adiw	r28, 0x12	; 18
    1984:	0f b6       	in	r0, 0x3f	; 63
    1986:	f8 94       	cli
    1988:	de bf       	out	0x3e, r29	; 62
    198a:	0f be       	out	0x3f, r0	; 63
    198c:	cd bf       	out	0x3d, r28	; 61
    198e:	cf 91       	pop	r28
    1990:	df 91       	pop	r29
    1992:	08 95       	ret

00001994 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1994:	df 93       	push	r29
    1996:	cf 93       	push	r28
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	0e 94 45 08 	call	0x108a	; 0x108a <LCD_sendCommand>
}
    19a2:	cf 91       	pop	r28
    19a4:	df 91       	pop	r29
    19a6:	08 95       	ret

000019a8 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    19a8:	df 93       	push	r29
    19aa:	cf 93       	push	r28
    19ac:	00 d0       	rcall	.+0      	; 0x19ae <KEYPAD_getPressedKey+0x6>
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	60 e0       	ldi	r22, 0x00	; 0
    19b6:	40 e0       	ldi	r20, 0x00	; 0
    19b8:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	61 e0       	ldi	r22, 0x01	; 1
    19c0:	40 e0       	ldi	r20, 0x00	; 0
    19c2:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	62 e0       	ldi	r22, 0x02	; 2
    19ca:	40 e0       	ldi	r20, 0x00	; 0
    19cc:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	63 e0       	ldi	r22, 0x03	; 3
    19d4:	40 e0       	ldi	r20, 0x00	; 0
    19d6:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	64 e0       	ldi	r22, 0x04	; 4
    19de:	40 e0       	ldi	r20, 0x00	; 0
    19e0:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	65 e0       	ldi	r22, 0x05	; 5
    19e8:	40 e0       	ldi	r20, 0x00	; 0
    19ea:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	66 e0       	ldi	r22, 0x06	; 6
    19f2:	40 e0       	ldi	r20, 0x00	; 0
    19f4:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	67 e0       	ldi	r22, 0x07	; 7
    19fc:	40 e0       	ldi	r20, 0x00	; 0
    19fe:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1a02:	19 82       	std	Y+1, r1	; 0x01
    1a04:	35 c0       	rjmp	.+106    	; 0x1a70 <KEYPAD_getPressedKey+0xc8>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	69 81       	ldd	r22, Y+1	; 0x01
    1a0a:	41 e0       	ldi	r20, 0x01	; 1
    1a0c:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	69 81       	ldd	r22, Y+1	; 0x01
    1a14:	40 e0       	ldi	r20, 0x00	; 0
    1a16:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1a1a:	1a 82       	std	Y+2, r1	; 0x02
    1a1c:	1e c0       	rjmp	.+60     	; 0x1a5a <KEYPAD_getPressedKey+0xb2>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a20:	98 2f       	mov	r25, r24
    1a22:	9c 5f       	subi	r25, 0xFC	; 252
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	69 2f       	mov	r22, r25
    1a28:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <GPIO_readPin>
    1a2c:	88 23       	and	r24, r24
    1a2e:	91 f4       	brne	.+36     	; 0x1a54 <KEYPAD_getPressedKey+0xac>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	88 2f       	mov	r24, r24
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	88 0f       	add	r24, r24
    1a38:	99 1f       	adc	r25, r25
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	98 2f       	mov	r25, r24
    1a40:	8a 81       	ldd	r24, Y+2	; 0x02
    1a42:	89 0f       	add	r24, r25
    1a44:	8f 5f       	subi	r24, 0xFF	; 255
    1a46:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	cf 91       	pop	r28
    1a50:	df 91       	pop	r29
    1a52:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1a54:	8a 81       	ldd	r24, Y+2	; 0x02
    1a56:	8f 5f       	subi	r24, 0xFF	; 255
    1a58:	8a 83       	std	Y+2, r24	; 0x02
    1a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5c:	84 30       	cpi	r24, 0x04	; 4
    1a5e:	f8 f2       	brcs	.-66     	; 0x1a1e <KEYPAD_getPressedKey+0x76>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	69 81       	ldd	r22, Y+1	; 0x01
    1a64:	40 e0       	ldi	r20, 0x00	; 0
    1a66:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	8f 5f       	subi	r24, 0xFF	; 255
    1a6e:	89 83       	std	Y+1, r24	; 0x01
    1a70:	89 81       	ldd	r24, Y+1	; 0x01
    1a72:	84 30       	cpi	r24, 0x04	; 4
    1a74:	40 f2       	brcs	.-112    	; 0x1a06 <KEYPAD_getPressedKey+0x5e>
    1a76:	c5 cf       	rjmp	.-118    	; 0x1a02 <KEYPAD_getPressedKey+0x5a>

00001a78 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1a78:	df 93       	push	r29
    1a7a:	cf 93       	push	r28
    1a7c:	00 d0       	rcall	.+0      	; 0x1a7e <KEYPAD_4x4_adjustKeyNumber+0x6>
    1a7e:	00 d0       	rcall	.+0      	; 0x1a80 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1a80:	cd b7       	in	r28, 0x3d	; 61
    1a82:	de b7       	in	r29, 0x3e	; 62
    1a84:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1a86:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1a88:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8a:	28 2f       	mov	r18, r24
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	3c 83       	std	Y+4, r19	; 0x04
    1a90:	2b 83       	std	Y+3, r18	; 0x03
    1a92:	8b 81       	ldd	r24, Y+3	; 0x03
    1a94:	9c 81       	ldd	r25, Y+4	; 0x04
    1a96:	88 30       	cpi	r24, 0x08	; 8
    1a98:	91 05       	cpc	r25, r1
    1a9a:	09 f4       	brne	.+2      	; 0x1a9e <KEYPAD_4x4_adjustKeyNumber+0x26>
    1a9c:	70 c0       	rjmp	.+224    	; 0x1b7e <KEYPAD_4x4_adjustKeyNumber+0x106>
    1a9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa0:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa2:	29 30       	cpi	r18, 0x09	; 9
    1aa4:	31 05       	cpc	r19, r1
    1aa6:	5c f5       	brge	.+86     	; 0x1afe <KEYPAD_4x4_adjustKeyNumber+0x86>
    1aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aaa:	9c 81       	ldd	r25, Y+4	; 0x04
    1aac:	84 30       	cpi	r24, 0x04	; 4
    1aae:	91 05       	cpc	r25, r1
    1ab0:	09 f4       	brne	.+2      	; 0x1ab4 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1ab2:	59 c0       	rjmp	.+178    	; 0x1b66 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1ab4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ab6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ab8:	25 30       	cpi	r18, 0x05	; 5
    1aba:	31 05       	cpc	r19, r1
    1abc:	9c f4       	brge	.+38     	; 0x1ae4 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1abe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac2:	82 30       	cpi	r24, 0x02	; 2
    1ac4:	91 05       	cpc	r25, r1
    1ac6:	09 f4       	brne	.+2      	; 0x1aca <KEYPAD_4x4_adjustKeyNumber+0x52>
    1ac8:	48 c0       	rjmp	.+144    	; 0x1b5a <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1aca:	2b 81       	ldd	r18, Y+3	; 0x03
    1acc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ace:	23 30       	cpi	r18, 0x03	; 3
    1ad0:	31 05       	cpc	r19, r1
    1ad2:	0c f0       	brlt	.+2      	; 0x1ad6 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1ad4:	45 c0       	rjmp	.+138    	; 0x1b60 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ada:	81 30       	cpi	r24, 0x01	; 1
    1adc:	91 05       	cpc	r25, r1
    1ade:	09 f4       	brne	.+2      	; 0x1ae2 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1ae0:	39 c0       	rjmp	.+114    	; 0x1b54 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1ae2:	67 c0       	rjmp	.+206    	; 0x1bb2 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1ae4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ae8:	26 30       	cpi	r18, 0x06	; 6
    1aea:	31 05       	cpc	r19, r1
    1aec:	09 f4       	brne	.+2      	; 0x1af0 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1aee:	41 c0       	rjmp	.+130    	; 0x1b72 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1af0:	8b 81       	ldd	r24, Y+3	; 0x03
    1af2:	9c 81       	ldd	r25, Y+4	; 0x04
    1af4:	87 30       	cpi	r24, 0x07	; 7
    1af6:	91 05       	cpc	r25, r1
    1af8:	0c f0       	brlt	.+2      	; 0x1afc <KEYPAD_4x4_adjustKeyNumber+0x84>
    1afa:	3e c0       	rjmp	.+124    	; 0x1b78 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1afc:	37 c0       	rjmp	.+110    	; 0x1b6c <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1afe:	2b 81       	ldd	r18, Y+3	; 0x03
    1b00:	3c 81       	ldd	r19, Y+4	; 0x04
    1b02:	2c 30       	cpi	r18, 0x0C	; 12
    1b04:	31 05       	cpc	r19, r1
    1b06:	09 f4       	brne	.+2      	; 0x1b0a <KEYPAD_4x4_adjustKeyNumber+0x92>
    1b08:	46 c0       	rjmp	.+140    	; 0x1b96 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0e:	8d 30       	cpi	r24, 0x0D	; 13
    1b10:	91 05       	cpc	r25, r1
    1b12:	5c f4       	brge	.+22     	; 0x1b2a <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1b14:	2b 81       	ldd	r18, Y+3	; 0x03
    1b16:	3c 81       	ldd	r19, Y+4	; 0x04
    1b18:	2a 30       	cpi	r18, 0x0A	; 10
    1b1a:	31 05       	cpc	r19, r1
    1b1c:	b1 f1       	breq	.+108    	; 0x1b8a <KEYPAD_4x4_adjustKeyNumber+0x112>
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	9c 81       	ldd	r25, Y+4	; 0x04
    1b22:	8b 30       	cpi	r24, 0x0B	; 11
    1b24:	91 05       	cpc	r25, r1
    1b26:	a4 f5       	brge	.+104    	; 0x1b90 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1b28:	2d c0       	rjmp	.+90     	; 0x1b84 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1b2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b2c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b2e:	2e 30       	cpi	r18, 0x0E	; 14
    1b30:	31 05       	cpc	r19, r1
    1b32:	b9 f1       	breq	.+110    	; 0x1ba2 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	9c 81       	ldd	r25, Y+4	; 0x04
    1b38:	8e 30       	cpi	r24, 0x0E	; 14
    1b3a:	91 05       	cpc	r25, r1
    1b3c:	7c f1       	brlt	.+94     	; 0x1b9c <KEYPAD_4x4_adjustKeyNumber+0x124>
    1b3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b40:	3c 81       	ldd	r19, Y+4	; 0x04
    1b42:	2f 30       	cpi	r18, 0x0F	; 15
    1b44:	31 05       	cpc	r19, r1
    1b46:	79 f1       	breq	.+94     	; 0x1ba6 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1b48:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4c:	80 31       	cpi	r24, 0x10	; 16
    1b4e:	91 05       	cpc	r25, r1
    1b50:	69 f1       	breq	.+90     	; 0x1bac <KEYPAD_4x4_adjustKeyNumber+0x134>
    1b52:	2f c0       	rjmp	.+94     	; 0x1bb2 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1b54:	87 e0       	ldi	r24, 0x07	; 7
    1b56:	89 83       	std	Y+1, r24	; 0x01
    1b58:	2e c0       	rjmp	.+92     	; 0x1bb6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1b5a:	88 e0       	ldi	r24, 0x08	; 8
    1b5c:	89 83       	std	Y+1, r24	; 0x01
    1b5e:	2b c0       	rjmp	.+86     	; 0x1bb6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1b60:	89 e0       	ldi	r24, 0x09	; 9
    1b62:	89 83       	std	Y+1, r24	; 0x01
    1b64:	28 c0       	rjmp	.+80     	; 0x1bb6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1b66:	85 e2       	ldi	r24, 0x25	; 37
    1b68:	89 83       	std	Y+1, r24	; 0x01
    1b6a:	25 c0       	rjmp	.+74     	; 0x1bb6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1b6c:	84 e0       	ldi	r24, 0x04	; 4
    1b6e:	89 83       	std	Y+1, r24	; 0x01
    1b70:	22 c0       	rjmp	.+68     	; 0x1bb6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1b72:	85 e0       	ldi	r24, 0x05	; 5
    1b74:	89 83       	std	Y+1, r24	; 0x01
    1b76:	1f c0       	rjmp	.+62     	; 0x1bb6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1b78:	86 e0       	ldi	r24, 0x06	; 6
    1b7a:	89 83       	std	Y+1, r24	; 0x01
    1b7c:	1c c0       	rjmp	.+56     	; 0x1bb6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1b7e:	8a e2       	ldi	r24, 0x2A	; 42
    1b80:	89 83       	std	Y+1, r24	; 0x01
    1b82:	19 c0       	rjmp	.+50     	; 0x1bb6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	89 83       	std	Y+1, r24	; 0x01
    1b88:	16 c0       	rjmp	.+44     	; 0x1bb6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1b8a:	82 e0       	ldi	r24, 0x02	; 2
    1b8c:	89 83       	std	Y+1, r24	; 0x01
    1b8e:	13 c0       	rjmp	.+38     	; 0x1bb6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1b90:	83 e0       	ldi	r24, 0x03	; 3
    1b92:	89 83       	std	Y+1, r24	; 0x01
    1b94:	10 c0       	rjmp	.+32     	; 0x1bb6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1b96:	8d e2       	ldi	r24, 0x2D	; 45
    1b98:	89 83       	std	Y+1, r24	; 0x01
    1b9a:	0d c0       	rjmp	.+26     	; 0x1bb6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1b9c:	8d e0       	ldi	r24, 0x0D	; 13
    1b9e:	89 83       	std	Y+1, r24	; 0x01
    1ba0:	0a c0       	rjmp	.+20     	; 0x1bb6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1ba2:	19 82       	std	Y+1, r1	; 0x01
    1ba4:	08 c0       	rjmp	.+16     	; 0x1bb6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1ba6:	8d e3       	ldi	r24, 0x3D	; 61
    1ba8:	89 83       	std	Y+1, r24	; 0x01
    1baa:	05 c0       	rjmp	.+10     	; 0x1bb6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1bac:	8b e2       	ldi	r24, 0x2B	; 43
    1bae:	89 83       	std	Y+1, r24	; 0x01
    1bb0:	02 c0       	rjmp	.+4      	; 0x1bb6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	cf 91       	pop	r28
    1bc2:	df 91       	pop	r29
    1bc4:	08 95       	ret

00001bc6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1bc6:	df 93       	push	r29
    1bc8:	cf 93       	push	r28
    1bca:	00 d0       	rcall	.+0      	; 0x1bcc <GPIO_setupPinDirection+0x6>
    1bcc:	00 d0       	rcall	.+0      	; 0x1bce <GPIO_setupPinDirection+0x8>
    1bce:	0f 92       	push	r0
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
    1bd4:	89 83       	std	Y+1, r24	; 0x01
    1bd6:	6a 83       	std	Y+2, r22	; 0x02
    1bd8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1bda:	8a 81       	ldd	r24, Y+2	; 0x02
    1bdc:	88 30       	cpi	r24, 0x08	; 8
    1bde:	08 f0       	brcs	.+2      	; 0x1be2 <GPIO_setupPinDirection+0x1c>
    1be0:	d5 c0       	rjmp	.+426    	; 0x1d8c <GPIO_setupPinDirection+0x1c6>
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	84 30       	cpi	r24, 0x04	; 4
    1be6:	08 f0       	brcs	.+2      	; 0x1bea <GPIO_setupPinDirection+0x24>
    1be8:	d1 c0       	rjmp	.+418    	; 0x1d8c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
    1bec:	28 2f       	mov	r18, r24
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	3d 83       	std	Y+5, r19	; 0x05
    1bf2:	2c 83       	std	Y+4, r18	; 0x04
    1bf4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf6:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf8:	81 30       	cpi	r24, 0x01	; 1
    1bfa:	91 05       	cpc	r25, r1
    1bfc:	09 f4       	brne	.+2      	; 0x1c00 <GPIO_setupPinDirection+0x3a>
    1bfe:	43 c0       	rjmp	.+134    	; 0x1c86 <GPIO_setupPinDirection+0xc0>
    1c00:	2c 81       	ldd	r18, Y+4	; 0x04
    1c02:	3d 81       	ldd	r19, Y+5	; 0x05
    1c04:	22 30       	cpi	r18, 0x02	; 2
    1c06:	31 05       	cpc	r19, r1
    1c08:	2c f4       	brge	.+10     	; 0x1c14 <GPIO_setupPinDirection+0x4e>
    1c0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	71 f0       	breq	.+28     	; 0x1c2e <GPIO_setupPinDirection+0x68>
    1c12:	bc c0       	rjmp	.+376    	; 0x1d8c <GPIO_setupPinDirection+0x1c6>
    1c14:	2c 81       	ldd	r18, Y+4	; 0x04
    1c16:	3d 81       	ldd	r19, Y+5	; 0x05
    1c18:	22 30       	cpi	r18, 0x02	; 2
    1c1a:	31 05       	cpc	r19, r1
    1c1c:	09 f4       	brne	.+2      	; 0x1c20 <GPIO_setupPinDirection+0x5a>
    1c1e:	5f c0       	rjmp	.+190    	; 0x1cde <GPIO_setupPinDirection+0x118>
    1c20:	8c 81       	ldd	r24, Y+4	; 0x04
    1c22:	9d 81       	ldd	r25, Y+5	; 0x05
    1c24:	83 30       	cpi	r24, 0x03	; 3
    1c26:	91 05       	cpc	r25, r1
    1c28:	09 f4       	brne	.+2      	; 0x1c2c <GPIO_setupPinDirection+0x66>
    1c2a:	85 c0       	rjmp	.+266    	; 0x1d36 <GPIO_setupPinDirection+0x170>
    1c2c:	af c0       	rjmp	.+350    	; 0x1d8c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c30:	81 30       	cpi	r24, 0x01	; 1
    1c32:	a1 f4       	brne	.+40     	; 0x1c5c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1c34:	aa e3       	ldi	r26, 0x3A	; 58
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	ea e3       	ldi	r30, 0x3A	; 58
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	48 2f       	mov	r20, r24
    1c40:	8a 81       	ldd	r24, Y+2	; 0x02
    1c42:	28 2f       	mov	r18, r24
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	02 2e       	mov	r0, r18
    1c4c:	02 c0       	rjmp	.+4      	; 0x1c52 <GPIO_setupPinDirection+0x8c>
    1c4e:	88 0f       	add	r24, r24
    1c50:	99 1f       	adc	r25, r25
    1c52:	0a 94       	dec	r0
    1c54:	e2 f7       	brpl	.-8      	; 0x1c4e <GPIO_setupPinDirection+0x88>
    1c56:	84 2b       	or	r24, r20
    1c58:	8c 93       	st	X, r24
    1c5a:	98 c0       	rjmp	.+304    	; 0x1d8c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1c5c:	aa e3       	ldi	r26, 0x3A	; 58
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	ea e3       	ldi	r30, 0x3A	; 58
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	48 2f       	mov	r20, r24
    1c68:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6a:	28 2f       	mov	r18, r24
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	02 2e       	mov	r0, r18
    1c74:	02 c0       	rjmp	.+4      	; 0x1c7a <GPIO_setupPinDirection+0xb4>
    1c76:	88 0f       	add	r24, r24
    1c78:	99 1f       	adc	r25, r25
    1c7a:	0a 94       	dec	r0
    1c7c:	e2 f7       	brpl	.-8      	; 0x1c76 <GPIO_setupPinDirection+0xb0>
    1c7e:	80 95       	com	r24
    1c80:	84 23       	and	r24, r20
    1c82:	8c 93       	st	X, r24
    1c84:	83 c0       	rjmp	.+262    	; 0x1d8c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1c86:	8b 81       	ldd	r24, Y+3	; 0x03
    1c88:	81 30       	cpi	r24, 0x01	; 1
    1c8a:	a1 f4       	brne	.+40     	; 0x1cb4 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1c8c:	a7 e3       	ldi	r26, 0x37	; 55
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	e7 e3       	ldi	r30, 0x37	; 55
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	48 2f       	mov	r20, r24
    1c98:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9a:	28 2f       	mov	r18, r24
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	02 2e       	mov	r0, r18
    1ca4:	02 c0       	rjmp	.+4      	; 0x1caa <GPIO_setupPinDirection+0xe4>
    1ca6:	88 0f       	add	r24, r24
    1ca8:	99 1f       	adc	r25, r25
    1caa:	0a 94       	dec	r0
    1cac:	e2 f7       	brpl	.-8      	; 0x1ca6 <GPIO_setupPinDirection+0xe0>
    1cae:	84 2b       	or	r24, r20
    1cb0:	8c 93       	st	X, r24
    1cb2:	6c c0       	rjmp	.+216    	; 0x1d8c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1cb4:	a7 e3       	ldi	r26, 0x37	; 55
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	e7 e3       	ldi	r30, 0x37	; 55
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	48 2f       	mov	r20, r24
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	28 2f       	mov	r18, r24
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	02 2e       	mov	r0, r18
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <GPIO_setupPinDirection+0x10c>
    1cce:	88 0f       	add	r24, r24
    1cd0:	99 1f       	adc	r25, r25
    1cd2:	0a 94       	dec	r0
    1cd4:	e2 f7       	brpl	.-8      	; 0x1cce <GPIO_setupPinDirection+0x108>
    1cd6:	80 95       	com	r24
    1cd8:	84 23       	and	r24, r20
    1cda:	8c 93       	st	X, r24
    1cdc:	57 c0       	rjmp	.+174    	; 0x1d8c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	81 30       	cpi	r24, 0x01	; 1
    1ce2:	a1 f4       	brne	.+40     	; 0x1d0c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1ce4:	a4 e3       	ldi	r26, 0x34	; 52
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	e4 e3       	ldi	r30, 0x34	; 52
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	48 2f       	mov	r20, r24
    1cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf2:	28 2f       	mov	r18, r24
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	02 2e       	mov	r0, r18
    1cfc:	02 c0       	rjmp	.+4      	; 0x1d02 <GPIO_setupPinDirection+0x13c>
    1cfe:	88 0f       	add	r24, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	0a 94       	dec	r0
    1d04:	e2 f7       	brpl	.-8      	; 0x1cfe <GPIO_setupPinDirection+0x138>
    1d06:	84 2b       	or	r24, r20
    1d08:	8c 93       	st	X, r24
    1d0a:	40 c0       	rjmp	.+128    	; 0x1d8c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1d0c:	a4 e3       	ldi	r26, 0x34	; 52
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	e4 e3       	ldi	r30, 0x34	; 52
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	48 2f       	mov	r20, r24
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	02 2e       	mov	r0, r18
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <GPIO_setupPinDirection+0x164>
    1d26:	88 0f       	add	r24, r24
    1d28:	99 1f       	adc	r25, r25
    1d2a:	0a 94       	dec	r0
    1d2c:	e2 f7       	brpl	.-8      	; 0x1d26 <GPIO_setupPinDirection+0x160>
    1d2e:	80 95       	com	r24
    1d30:	84 23       	and	r24, r20
    1d32:	8c 93       	st	X, r24
    1d34:	2b c0       	rjmp	.+86     	; 0x1d8c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1d36:	8b 81       	ldd	r24, Y+3	; 0x03
    1d38:	81 30       	cpi	r24, 0x01	; 1
    1d3a:	a1 f4       	brne	.+40     	; 0x1d64 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1d3c:	a1 e3       	ldi	r26, 0x31	; 49
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	e1 e3       	ldi	r30, 0x31	; 49
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	48 2f       	mov	r20, r24
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	28 2f       	mov	r18, r24
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	02 2e       	mov	r0, r18
    1d54:	02 c0       	rjmp	.+4      	; 0x1d5a <GPIO_setupPinDirection+0x194>
    1d56:	88 0f       	add	r24, r24
    1d58:	99 1f       	adc	r25, r25
    1d5a:	0a 94       	dec	r0
    1d5c:	e2 f7       	brpl	.-8      	; 0x1d56 <GPIO_setupPinDirection+0x190>
    1d5e:	84 2b       	or	r24, r20
    1d60:	8c 93       	st	X, r24
    1d62:	14 c0       	rjmp	.+40     	; 0x1d8c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1d64:	a1 e3       	ldi	r26, 0x31	; 49
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	e1 e3       	ldi	r30, 0x31	; 49
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	48 2f       	mov	r20, r24
    1d70:	8a 81       	ldd	r24, Y+2	; 0x02
    1d72:	28 2f       	mov	r18, r24
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	02 2e       	mov	r0, r18
    1d7c:	02 c0       	rjmp	.+4      	; 0x1d82 <GPIO_setupPinDirection+0x1bc>
    1d7e:	88 0f       	add	r24, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	0a 94       	dec	r0
    1d84:	e2 f7       	brpl	.-8      	; 0x1d7e <GPIO_setupPinDirection+0x1b8>
    1d86:	80 95       	com	r24
    1d88:	84 23       	and	r24, r20
    1d8a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	0f 90       	pop	r0
    1d96:	cf 91       	pop	r28
    1d98:	df 91       	pop	r29
    1d9a:	08 95       	ret

00001d9c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1d9c:	df 93       	push	r29
    1d9e:	cf 93       	push	r28
    1da0:	00 d0       	rcall	.+0      	; 0x1da2 <GPIO_writePin+0x6>
    1da2:	00 d0       	rcall	.+0      	; 0x1da4 <GPIO_writePin+0x8>
    1da4:	0f 92       	push	r0
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
    1daa:	89 83       	std	Y+1, r24	; 0x01
    1dac:	6a 83       	std	Y+2, r22	; 0x02
    1dae:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1db0:	8a 81       	ldd	r24, Y+2	; 0x02
    1db2:	88 30       	cpi	r24, 0x08	; 8
    1db4:	08 f0       	brcs	.+2      	; 0x1db8 <GPIO_writePin+0x1c>
    1db6:	d5 c0       	rjmp	.+426    	; 0x1f62 <GPIO_writePin+0x1c6>
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	84 30       	cpi	r24, 0x04	; 4
    1dbc:	08 f0       	brcs	.+2      	; 0x1dc0 <GPIO_writePin+0x24>
    1dbe:	d1 c0       	rjmp	.+418    	; 0x1f62 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	28 2f       	mov	r18, r24
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	3d 83       	std	Y+5, r19	; 0x05
    1dc8:	2c 83       	std	Y+4, r18	; 0x04
    1dca:	8c 81       	ldd	r24, Y+4	; 0x04
    1dcc:	9d 81       	ldd	r25, Y+5	; 0x05
    1dce:	81 30       	cpi	r24, 0x01	; 1
    1dd0:	91 05       	cpc	r25, r1
    1dd2:	09 f4       	brne	.+2      	; 0x1dd6 <GPIO_writePin+0x3a>
    1dd4:	43 c0       	rjmp	.+134    	; 0x1e5c <GPIO_writePin+0xc0>
    1dd6:	2c 81       	ldd	r18, Y+4	; 0x04
    1dd8:	3d 81       	ldd	r19, Y+5	; 0x05
    1dda:	22 30       	cpi	r18, 0x02	; 2
    1ddc:	31 05       	cpc	r19, r1
    1dde:	2c f4       	brge	.+10     	; 0x1dea <GPIO_writePin+0x4e>
    1de0:	8c 81       	ldd	r24, Y+4	; 0x04
    1de2:	9d 81       	ldd	r25, Y+5	; 0x05
    1de4:	00 97       	sbiw	r24, 0x00	; 0
    1de6:	71 f0       	breq	.+28     	; 0x1e04 <GPIO_writePin+0x68>
    1de8:	bc c0       	rjmp	.+376    	; 0x1f62 <GPIO_writePin+0x1c6>
    1dea:	2c 81       	ldd	r18, Y+4	; 0x04
    1dec:	3d 81       	ldd	r19, Y+5	; 0x05
    1dee:	22 30       	cpi	r18, 0x02	; 2
    1df0:	31 05       	cpc	r19, r1
    1df2:	09 f4       	brne	.+2      	; 0x1df6 <GPIO_writePin+0x5a>
    1df4:	5f c0       	rjmp	.+190    	; 0x1eb4 <GPIO_writePin+0x118>
    1df6:	8c 81       	ldd	r24, Y+4	; 0x04
    1df8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dfa:	83 30       	cpi	r24, 0x03	; 3
    1dfc:	91 05       	cpc	r25, r1
    1dfe:	09 f4       	brne	.+2      	; 0x1e02 <GPIO_writePin+0x66>
    1e00:	85 c0       	rjmp	.+266    	; 0x1f0c <GPIO_writePin+0x170>
    1e02:	af c0       	rjmp	.+350    	; 0x1f62 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	81 30       	cpi	r24, 0x01	; 1
    1e08:	a1 f4       	brne	.+40     	; 0x1e32 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1e0a:	ab e3       	ldi	r26, 0x3B	; 59
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	eb e3       	ldi	r30, 0x3B	; 59
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	48 2f       	mov	r20, r24
    1e16:	8a 81       	ldd	r24, Y+2	; 0x02
    1e18:	28 2f       	mov	r18, r24
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	02 2e       	mov	r0, r18
    1e22:	02 c0       	rjmp	.+4      	; 0x1e28 <GPIO_writePin+0x8c>
    1e24:	88 0f       	add	r24, r24
    1e26:	99 1f       	adc	r25, r25
    1e28:	0a 94       	dec	r0
    1e2a:	e2 f7       	brpl	.-8      	; 0x1e24 <GPIO_writePin+0x88>
    1e2c:	84 2b       	or	r24, r20
    1e2e:	8c 93       	st	X, r24
    1e30:	98 c0       	rjmp	.+304    	; 0x1f62 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1e32:	ab e3       	ldi	r26, 0x3B	; 59
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	eb e3       	ldi	r30, 0x3B	; 59
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	48 2f       	mov	r20, r24
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	28 2f       	mov	r18, r24
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	02 2e       	mov	r0, r18
    1e4a:	02 c0       	rjmp	.+4      	; 0x1e50 <GPIO_writePin+0xb4>
    1e4c:	88 0f       	add	r24, r24
    1e4e:	99 1f       	adc	r25, r25
    1e50:	0a 94       	dec	r0
    1e52:	e2 f7       	brpl	.-8      	; 0x1e4c <GPIO_writePin+0xb0>
    1e54:	80 95       	com	r24
    1e56:	84 23       	and	r24, r20
    1e58:	8c 93       	st	X, r24
    1e5a:	83 c0       	rjmp	.+262    	; 0x1f62 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	81 30       	cpi	r24, 0x01	; 1
    1e60:	a1 f4       	brne	.+40     	; 0x1e8a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1e62:	a8 e3       	ldi	r26, 0x38	; 56
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	e8 e3       	ldi	r30, 0x38	; 56
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	48 2f       	mov	r20, r24
    1e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e70:	28 2f       	mov	r18, r24
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	02 2e       	mov	r0, r18
    1e7a:	02 c0       	rjmp	.+4      	; 0x1e80 <GPIO_writePin+0xe4>
    1e7c:	88 0f       	add	r24, r24
    1e7e:	99 1f       	adc	r25, r25
    1e80:	0a 94       	dec	r0
    1e82:	e2 f7       	brpl	.-8      	; 0x1e7c <GPIO_writePin+0xe0>
    1e84:	84 2b       	or	r24, r20
    1e86:	8c 93       	st	X, r24
    1e88:	6c c0       	rjmp	.+216    	; 0x1f62 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1e8a:	a8 e3       	ldi	r26, 0x38	; 56
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	e8 e3       	ldi	r30, 0x38	; 56
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	48 2f       	mov	r20, r24
    1e96:	8a 81       	ldd	r24, Y+2	; 0x02
    1e98:	28 2f       	mov	r18, r24
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	02 2e       	mov	r0, r18
    1ea2:	02 c0       	rjmp	.+4      	; 0x1ea8 <GPIO_writePin+0x10c>
    1ea4:	88 0f       	add	r24, r24
    1ea6:	99 1f       	adc	r25, r25
    1ea8:	0a 94       	dec	r0
    1eaa:	e2 f7       	brpl	.-8      	; 0x1ea4 <GPIO_writePin+0x108>
    1eac:	80 95       	com	r24
    1eae:	84 23       	and	r24, r20
    1eb0:	8c 93       	st	X, r24
    1eb2:	57 c0       	rjmp	.+174    	; 0x1f62 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb6:	81 30       	cpi	r24, 0x01	; 1
    1eb8:	a1 f4       	brne	.+40     	; 0x1ee2 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1eba:	a5 e3       	ldi	r26, 0x35	; 53
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	e5 e3       	ldi	r30, 0x35	; 53
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	48 2f       	mov	r20, r24
    1ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec8:	28 2f       	mov	r18, r24
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	02 2e       	mov	r0, r18
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <GPIO_writePin+0x13c>
    1ed4:	88 0f       	add	r24, r24
    1ed6:	99 1f       	adc	r25, r25
    1ed8:	0a 94       	dec	r0
    1eda:	e2 f7       	brpl	.-8      	; 0x1ed4 <GPIO_writePin+0x138>
    1edc:	84 2b       	or	r24, r20
    1ede:	8c 93       	st	X, r24
    1ee0:	40 c0       	rjmp	.+128    	; 0x1f62 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1ee2:	a5 e3       	ldi	r26, 0x35	; 53
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	e5 e3       	ldi	r30, 0x35	; 53
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	48 2f       	mov	r20, r24
    1eee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef0:	28 2f       	mov	r18, r24
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	02 2e       	mov	r0, r18
    1efa:	02 c0       	rjmp	.+4      	; 0x1f00 <GPIO_writePin+0x164>
    1efc:	88 0f       	add	r24, r24
    1efe:	99 1f       	adc	r25, r25
    1f00:	0a 94       	dec	r0
    1f02:	e2 f7       	brpl	.-8      	; 0x1efc <GPIO_writePin+0x160>
    1f04:	80 95       	com	r24
    1f06:	84 23       	and	r24, r20
    1f08:	8c 93       	st	X, r24
    1f0a:	2b c0       	rjmp	.+86     	; 0x1f62 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0e:	81 30       	cpi	r24, 0x01	; 1
    1f10:	a1 f4       	brne	.+40     	; 0x1f3a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1f12:	a2 e3       	ldi	r26, 0x32	; 50
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	e2 e3       	ldi	r30, 0x32	; 50
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	48 2f       	mov	r20, r24
    1f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f20:	28 2f       	mov	r18, r24
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	02 2e       	mov	r0, r18
    1f2a:	02 c0       	rjmp	.+4      	; 0x1f30 <GPIO_writePin+0x194>
    1f2c:	88 0f       	add	r24, r24
    1f2e:	99 1f       	adc	r25, r25
    1f30:	0a 94       	dec	r0
    1f32:	e2 f7       	brpl	.-8      	; 0x1f2c <GPIO_writePin+0x190>
    1f34:	84 2b       	or	r24, r20
    1f36:	8c 93       	st	X, r24
    1f38:	14 c0       	rjmp	.+40     	; 0x1f62 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1f3a:	a2 e3       	ldi	r26, 0x32	; 50
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	e2 e3       	ldi	r30, 0x32	; 50
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	48 2f       	mov	r20, r24
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	28 2f       	mov	r18, r24
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	02 2e       	mov	r0, r18
    1f52:	02 c0       	rjmp	.+4      	; 0x1f58 <GPIO_writePin+0x1bc>
    1f54:	88 0f       	add	r24, r24
    1f56:	99 1f       	adc	r25, r25
    1f58:	0a 94       	dec	r0
    1f5a:	e2 f7       	brpl	.-8      	; 0x1f54 <GPIO_writePin+0x1b8>
    1f5c:	80 95       	com	r24
    1f5e:	84 23       	and	r24, r20
    1f60:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	0f 90       	pop	r0
    1f6a:	0f 90       	pop	r0
    1f6c:	cf 91       	pop	r28
    1f6e:	df 91       	pop	r29
    1f70:	08 95       	ret

00001f72 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1f72:	df 93       	push	r29
    1f74:	cf 93       	push	r28
    1f76:	00 d0       	rcall	.+0      	; 0x1f78 <GPIO_readPin+0x6>
    1f78:	00 d0       	rcall	.+0      	; 0x1f7a <GPIO_readPin+0x8>
    1f7a:	0f 92       	push	r0
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	8a 83       	std	Y+2, r24	; 0x02
    1f82:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1f84:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	88 30       	cpi	r24, 0x08	; 8
    1f8a:	08 f0       	brcs	.+2      	; 0x1f8e <GPIO_readPin+0x1c>
    1f8c:	84 c0       	rjmp	.+264    	; 0x2096 <GPIO_readPin+0x124>
    1f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f90:	84 30       	cpi	r24, 0x04	; 4
    1f92:	08 f0       	brcs	.+2      	; 0x1f96 <GPIO_readPin+0x24>
    1f94:	80 c0       	rjmp	.+256    	; 0x2096 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1f96:	8a 81       	ldd	r24, Y+2	; 0x02
    1f98:	28 2f       	mov	r18, r24
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	3d 83       	std	Y+5, r19	; 0x05
    1f9e:	2c 83       	std	Y+4, r18	; 0x04
    1fa0:	4c 81       	ldd	r20, Y+4	; 0x04
    1fa2:	5d 81       	ldd	r21, Y+5	; 0x05
    1fa4:	41 30       	cpi	r20, 0x01	; 1
    1fa6:	51 05       	cpc	r21, r1
    1fa8:	79 f1       	breq	.+94     	; 0x2008 <GPIO_readPin+0x96>
    1faa:	8c 81       	ldd	r24, Y+4	; 0x04
    1fac:	9d 81       	ldd	r25, Y+5	; 0x05
    1fae:	82 30       	cpi	r24, 0x02	; 2
    1fb0:	91 05       	cpc	r25, r1
    1fb2:	34 f4       	brge	.+12     	; 0x1fc0 <GPIO_readPin+0x4e>
    1fb4:	2c 81       	ldd	r18, Y+4	; 0x04
    1fb6:	3d 81       	ldd	r19, Y+5	; 0x05
    1fb8:	21 15       	cp	r18, r1
    1fba:	31 05       	cpc	r19, r1
    1fbc:	69 f0       	breq	.+26     	; 0x1fd8 <GPIO_readPin+0x66>
    1fbe:	6b c0       	rjmp	.+214    	; 0x2096 <GPIO_readPin+0x124>
    1fc0:	4c 81       	ldd	r20, Y+4	; 0x04
    1fc2:	5d 81       	ldd	r21, Y+5	; 0x05
    1fc4:	42 30       	cpi	r20, 0x02	; 2
    1fc6:	51 05       	cpc	r21, r1
    1fc8:	b9 f1       	breq	.+110    	; 0x2038 <GPIO_readPin+0xc6>
    1fca:	8c 81       	ldd	r24, Y+4	; 0x04
    1fcc:	9d 81       	ldd	r25, Y+5	; 0x05
    1fce:	83 30       	cpi	r24, 0x03	; 3
    1fd0:	91 05       	cpc	r25, r1
    1fd2:	09 f4       	brne	.+2      	; 0x1fd6 <GPIO_readPin+0x64>
    1fd4:	49 c0       	rjmp	.+146    	; 0x2068 <GPIO_readPin+0xf6>
    1fd6:	5f c0       	rjmp	.+190    	; 0x2096 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1fd8:	e9 e3       	ldi	r30, 0x39	; 57
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	28 2f       	mov	r18, r24
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe4:	88 2f       	mov	r24, r24
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	a9 01       	movw	r20, r18
    1fea:	02 c0       	rjmp	.+4      	; 0x1ff0 <GPIO_readPin+0x7e>
    1fec:	55 95       	asr	r21
    1fee:	47 95       	ror	r20
    1ff0:	8a 95       	dec	r24
    1ff2:	e2 f7       	brpl	.-8      	; 0x1fec <GPIO_readPin+0x7a>
    1ff4:	ca 01       	movw	r24, r20
    1ff6:	81 70       	andi	r24, 0x01	; 1
    1ff8:	90 70       	andi	r25, 0x00	; 0
    1ffa:	88 23       	and	r24, r24
    1ffc:	19 f0       	breq	.+6      	; 0x2004 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	89 83       	std	Y+1, r24	; 0x01
    2002:	49 c0       	rjmp	.+146    	; 0x2096 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2004:	19 82       	std	Y+1, r1	; 0x01
    2006:	47 c0       	rjmp	.+142    	; 0x2096 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2008:	e6 e3       	ldi	r30, 0x36	; 54
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	28 2f       	mov	r18, r24
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	8b 81       	ldd	r24, Y+3	; 0x03
    2014:	88 2f       	mov	r24, r24
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	a9 01       	movw	r20, r18
    201a:	02 c0       	rjmp	.+4      	; 0x2020 <GPIO_readPin+0xae>
    201c:	55 95       	asr	r21
    201e:	47 95       	ror	r20
    2020:	8a 95       	dec	r24
    2022:	e2 f7       	brpl	.-8      	; 0x201c <GPIO_readPin+0xaa>
    2024:	ca 01       	movw	r24, r20
    2026:	81 70       	andi	r24, 0x01	; 1
    2028:	90 70       	andi	r25, 0x00	; 0
    202a:	88 23       	and	r24, r24
    202c:	19 f0       	breq	.+6      	; 0x2034 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	89 83       	std	Y+1, r24	; 0x01
    2032:	31 c0       	rjmp	.+98     	; 0x2096 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2034:	19 82       	std	Y+1, r1	; 0x01
    2036:	2f c0       	rjmp	.+94     	; 0x2096 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2038:	e3 e3       	ldi	r30, 0x33	; 51
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	28 2f       	mov	r18, r24
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	8b 81       	ldd	r24, Y+3	; 0x03
    2044:	88 2f       	mov	r24, r24
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	a9 01       	movw	r20, r18
    204a:	02 c0       	rjmp	.+4      	; 0x2050 <GPIO_readPin+0xde>
    204c:	55 95       	asr	r21
    204e:	47 95       	ror	r20
    2050:	8a 95       	dec	r24
    2052:	e2 f7       	brpl	.-8      	; 0x204c <GPIO_readPin+0xda>
    2054:	ca 01       	movw	r24, r20
    2056:	81 70       	andi	r24, 0x01	; 1
    2058:	90 70       	andi	r25, 0x00	; 0
    205a:	88 23       	and	r24, r24
    205c:	19 f0       	breq	.+6      	; 0x2064 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	89 83       	std	Y+1, r24	; 0x01
    2062:	19 c0       	rjmp	.+50     	; 0x2096 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2064:	19 82       	std	Y+1, r1	; 0x01
    2066:	17 c0       	rjmp	.+46     	; 0x2096 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2068:	e0 e3       	ldi	r30, 0x30	; 48
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	28 2f       	mov	r18, r24
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	8b 81       	ldd	r24, Y+3	; 0x03
    2074:	88 2f       	mov	r24, r24
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	a9 01       	movw	r20, r18
    207a:	02 c0       	rjmp	.+4      	; 0x2080 <GPIO_readPin+0x10e>
    207c:	55 95       	asr	r21
    207e:	47 95       	ror	r20
    2080:	8a 95       	dec	r24
    2082:	e2 f7       	brpl	.-8      	; 0x207c <GPIO_readPin+0x10a>
    2084:	ca 01       	movw	r24, r20
    2086:	81 70       	andi	r24, 0x01	; 1
    2088:	90 70       	andi	r25, 0x00	; 0
    208a:	88 23       	and	r24, r24
    208c:	19 f0       	breq	.+6      	; 0x2094 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	89 83       	std	Y+1, r24	; 0x01
    2092:	01 c0       	rjmp	.+2      	; 0x2096 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2094:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2096:	89 81       	ldd	r24, Y+1	; 0x01
}
    2098:	0f 90       	pop	r0
    209a:	0f 90       	pop	r0
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	cf 91       	pop	r28
    20a4:	df 91       	pop	r29
    20a6:	08 95       	ret

000020a8 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    20a8:	df 93       	push	r29
    20aa:	cf 93       	push	r28
    20ac:	00 d0       	rcall	.+0      	; 0x20ae <GPIO_setupPortDirection+0x6>
    20ae:	00 d0       	rcall	.+0      	; 0x20b0 <GPIO_setupPortDirection+0x8>
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
    20b4:	89 83       	std	Y+1, r24	; 0x01
    20b6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    20b8:	89 81       	ldd	r24, Y+1	; 0x01
    20ba:	84 30       	cpi	r24, 0x04	; 4
    20bc:	90 f5       	brcc	.+100    	; 0x2122 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	28 2f       	mov	r18, r24
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	3c 83       	std	Y+4, r19	; 0x04
    20c6:	2b 83       	std	Y+3, r18	; 0x03
    20c8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ca:	9c 81       	ldd	r25, Y+4	; 0x04
    20cc:	81 30       	cpi	r24, 0x01	; 1
    20ce:	91 05       	cpc	r25, r1
    20d0:	d1 f0       	breq	.+52     	; 0x2106 <GPIO_setupPortDirection+0x5e>
    20d2:	2b 81       	ldd	r18, Y+3	; 0x03
    20d4:	3c 81       	ldd	r19, Y+4	; 0x04
    20d6:	22 30       	cpi	r18, 0x02	; 2
    20d8:	31 05       	cpc	r19, r1
    20da:	2c f4       	brge	.+10     	; 0x20e6 <GPIO_setupPortDirection+0x3e>
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	9c 81       	ldd	r25, Y+4	; 0x04
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	61 f0       	breq	.+24     	; 0x20fc <GPIO_setupPortDirection+0x54>
    20e4:	1e c0       	rjmp	.+60     	; 0x2122 <GPIO_setupPortDirection+0x7a>
    20e6:	2b 81       	ldd	r18, Y+3	; 0x03
    20e8:	3c 81       	ldd	r19, Y+4	; 0x04
    20ea:	22 30       	cpi	r18, 0x02	; 2
    20ec:	31 05       	cpc	r19, r1
    20ee:	81 f0       	breq	.+32     	; 0x2110 <GPIO_setupPortDirection+0x68>
    20f0:	8b 81       	ldd	r24, Y+3	; 0x03
    20f2:	9c 81       	ldd	r25, Y+4	; 0x04
    20f4:	83 30       	cpi	r24, 0x03	; 3
    20f6:	91 05       	cpc	r25, r1
    20f8:	81 f0       	breq	.+32     	; 0x211a <GPIO_setupPortDirection+0x72>
    20fa:	13 c0       	rjmp	.+38     	; 0x2122 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    20fc:	ea e3       	ldi	r30, 0x3A	; 58
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	8a 81       	ldd	r24, Y+2	; 0x02
    2102:	80 83       	st	Z, r24
    2104:	0e c0       	rjmp	.+28     	; 0x2122 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2106:	e7 e3       	ldi	r30, 0x37	; 55
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	8a 81       	ldd	r24, Y+2	; 0x02
    210c:	80 83       	st	Z, r24
    210e:	09 c0       	rjmp	.+18     	; 0x2122 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2110:	e4 e3       	ldi	r30, 0x34	; 52
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	8a 81       	ldd	r24, Y+2	; 0x02
    2116:	80 83       	st	Z, r24
    2118:	04 c0       	rjmp	.+8      	; 0x2122 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    211a:	e1 e3       	ldi	r30, 0x31	; 49
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	8a 81       	ldd	r24, Y+2	; 0x02
    2120:	80 83       	st	Z, r24
			break;
		}
	}
}
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	cf 91       	pop	r28
    212c:	df 91       	pop	r29
    212e:	08 95       	ret

00002130 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2130:	df 93       	push	r29
    2132:	cf 93       	push	r28
    2134:	00 d0       	rcall	.+0      	; 0x2136 <GPIO_writePort+0x6>
    2136:	00 d0       	rcall	.+0      	; 0x2138 <GPIO_writePort+0x8>
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
    213c:	89 83       	std	Y+1, r24	; 0x01
    213e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2140:	89 81       	ldd	r24, Y+1	; 0x01
    2142:	84 30       	cpi	r24, 0x04	; 4
    2144:	90 f5       	brcc	.+100    	; 0x21aa <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	28 2f       	mov	r18, r24
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	3c 83       	std	Y+4, r19	; 0x04
    214e:	2b 83       	std	Y+3, r18	; 0x03
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	9c 81       	ldd	r25, Y+4	; 0x04
    2154:	81 30       	cpi	r24, 0x01	; 1
    2156:	91 05       	cpc	r25, r1
    2158:	d1 f0       	breq	.+52     	; 0x218e <GPIO_writePort+0x5e>
    215a:	2b 81       	ldd	r18, Y+3	; 0x03
    215c:	3c 81       	ldd	r19, Y+4	; 0x04
    215e:	22 30       	cpi	r18, 0x02	; 2
    2160:	31 05       	cpc	r19, r1
    2162:	2c f4       	brge	.+10     	; 0x216e <GPIO_writePort+0x3e>
    2164:	8b 81       	ldd	r24, Y+3	; 0x03
    2166:	9c 81       	ldd	r25, Y+4	; 0x04
    2168:	00 97       	sbiw	r24, 0x00	; 0
    216a:	61 f0       	breq	.+24     	; 0x2184 <GPIO_writePort+0x54>
    216c:	1e c0       	rjmp	.+60     	; 0x21aa <GPIO_writePort+0x7a>
    216e:	2b 81       	ldd	r18, Y+3	; 0x03
    2170:	3c 81       	ldd	r19, Y+4	; 0x04
    2172:	22 30       	cpi	r18, 0x02	; 2
    2174:	31 05       	cpc	r19, r1
    2176:	81 f0       	breq	.+32     	; 0x2198 <GPIO_writePort+0x68>
    2178:	8b 81       	ldd	r24, Y+3	; 0x03
    217a:	9c 81       	ldd	r25, Y+4	; 0x04
    217c:	83 30       	cpi	r24, 0x03	; 3
    217e:	91 05       	cpc	r25, r1
    2180:	81 f0       	breq	.+32     	; 0x21a2 <GPIO_writePort+0x72>
    2182:	13 c0       	rjmp	.+38     	; 0x21aa <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2184:	eb e3       	ldi	r30, 0x3B	; 59
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	8a 81       	ldd	r24, Y+2	; 0x02
    218a:	80 83       	st	Z, r24
    218c:	0e c0       	rjmp	.+28     	; 0x21aa <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    218e:	e8 e3       	ldi	r30, 0x38	; 56
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
    2194:	80 83       	st	Z, r24
    2196:	09 c0       	rjmp	.+18     	; 0x21aa <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2198:	e5 e3       	ldi	r30, 0x35	; 53
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	8a 81       	ldd	r24, Y+2	; 0x02
    219e:	80 83       	st	Z, r24
    21a0:	04 c0       	rjmp	.+8      	; 0x21aa <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    21a2:	e2 e3       	ldi	r30, 0x32	; 50
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	8a 81       	ldd	r24, Y+2	; 0x02
    21a8:	80 83       	st	Z, r24
			break;
		}
	}
}
    21aa:	0f 90       	pop	r0
    21ac:	0f 90       	pop	r0
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	cf 91       	pop	r28
    21b4:	df 91       	pop	r29
    21b6:	08 95       	ret

000021b8 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    21b8:	df 93       	push	r29
    21ba:	cf 93       	push	r28
    21bc:	00 d0       	rcall	.+0      	; 0x21be <GPIO_readPort+0x6>
    21be:	00 d0       	rcall	.+0      	; 0x21c0 <GPIO_readPort+0x8>
    21c0:	cd b7       	in	r28, 0x3d	; 61
    21c2:	de b7       	in	r29, 0x3e	; 62
    21c4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    21c6:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    21c8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ca:	84 30       	cpi	r24, 0x04	; 4
    21cc:	90 f5       	brcc	.+100    	; 0x2232 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    21ce:	8a 81       	ldd	r24, Y+2	; 0x02
    21d0:	28 2f       	mov	r18, r24
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	3c 83       	std	Y+4, r19	; 0x04
    21d6:	2b 83       	std	Y+3, r18	; 0x03
    21d8:	8b 81       	ldd	r24, Y+3	; 0x03
    21da:	9c 81       	ldd	r25, Y+4	; 0x04
    21dc:	81 30       	cpi	r24, 0x01	; 1
    21de:	91 05       	cpc	r25, r1
    21e0:	d1 f0       	breq	.+52     	; 0x2216 <GPIO_readPort+0x5e>
    21e2:	2b 81       	ldd	r18, Y+3	; 0x03
    21e4:	3c 81       	ldd	r19, Y+4	; 0x04
    21e6:	22 30       	cpi	r18, 0x02	; 2
    21e8:	31 05       	cpc	r19, r1
    21ea:	2c f4       	brge	.+10     	; 0x21f6 <GPIO_readPort+0x3e>
    21ec:	8b 81       	ldd	r24, Y+3	; 0x03
    21ee:	9c 81       	ldd	r25, Y+4	; 0x04
    21f0:	00 97       	sbiw	r24, 0x00	; 0
    21f2:	61 f0       	breq	.+24     	; 0x220c <GPIO_readPort+0x54>
    21f4:	1e c0       	rjmp	.+60     	; 0x2232 <GPIO_readPort+0x7a>
    21f6:	2b 81       	ldd	r18, Y+3	; 0x03
    21f8:	3c 81       	ldd	r19, Y+4	; 0x04
    21fa:	22 30       	cpi	r18, 0x02	; 2
    21fc:	31 05       	cpc	r19, r1
    21fe:	81 f0       	breq	.+32     	; 0x2220 <GPIO_readPort+0x68>
    2200:	8b 81       	ldd	r24, Y+3	; 0x03
    2202:	9c 81       	ldd	r25, Y+4	; 0x04
    2204:	83 30       	cpi	r24, 0x03	; 3
    2206:	91 05       	cpc	r25, r1
    2208:	81 f0       	breq	.+32     	; 0x222a <GPIO_readPort+0x72>
    220a:	13 c0       	rjmp	.+38     	; 0x2232 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    220c:	e9 e3       	ldi	r30, 0x39	; 57
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	89 83       	std	Y+1, r24	; 0x01
    2214:	0e c0       	rjmp	.+28     	; 0x2232 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2216:	e6 e3       	ldi	r30, 0x36	; 54
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	89 83       	std	Y+1, r24	; 0x01
    221e:	09 c0       	rjmp	.+18     	; 0x2232 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2220:	e3 e3       	ldi	r30, 0x33	; 51
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	89 83       	std	Y+1, r24	; 0x01
    2228:	04 c0       	rjmp	.+8      	; 0x2232 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    222a:	e0 e3       	ldi	r30, 0x30	; 48
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2232:	89 81       	ldd	r24, Y+1	; 0x01
}
    2234:	0f 90       	pop	r0
    2236:	0f 90       	pop	r0
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	cf 91       	pop	r28
    223e:	df 91       	pop	r29
    2240:	08 95       	ret

00002242 <delay_3SEC>:
#define MATCHED   0X0F

static volatile uint8 g_tick=0;

void delay_3SEC(void)
{
    2242:	df 93       	push	r29
    2244:	cf 93       	push	r28
    2246:	cd b7       	in	r28, 0x3d	; 61
    2248:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    224a:	80 91 0c 01 	lds	r24, 0x010C
    224e:	8f 5f       	subi	r24, 0xFF	; 255
    2250:	80 93 0c 01 	sts	0x010C, r24
}
    2254:	cf 91       	pop	r28
    2256:	df 91       	pop	r29
    2258:	08 95       	ret

0000225a <main>:

int main(void)
{
    225a:	0f 93       	push	r16
    225c:	1f 93       	push	r17
    225e:	df 93       	push	r29
    2260:	cf 93       	push	r28
    2262:	cd b7       	in	r28, 0x3d	; 61
    2264:	de b7       	in	r29, 0x3e	; 62
    2266:	c0 57       	subi	r28, 0x70	; 112
    2268:	d0 40       	sbci	r29, 0x00	; 0
    226a:	0f b6       	in	r0, 0x3f	; 63
    226c:	f8 94       	cli
    226e:	de bf       	out	0x3e, r29	; 62
    2270:	0f be       	out	0x3f, r0	; 63
    2272:	cd bf       	out	0x3d, r28	; 61
	SREG|=(1<<7); /* enable Global interrupt*/
    2274:	af e5       	ldi	r26, 0x5F	; 95
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	ef e5       	ldi	r30, 0x5F	; 95
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	80 68       	ori	r24, 0x80	; 128
    2280:	8c 93       	st	X, r24
	uint8 i=0 ;
    2282:	fe 01       	movw	r30, r28
    2284:	e5 5b       	subi	r30, 0xB5	; 181
    2286:	ff 4f       	sbci	r31, 0xFF	; 255
    2288:	10 82       	st	Z, r1
	uint8 j=0;
    228a:	fe 01       	movw	r30, r28
    228c:	e6 5b       	subi	r30, 0xB6	; 182
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	10 82       	st	Z, r1
	uint8 key=0,menu=0;
    2292:	fe 01       	movw	r30, r28
    2294:	e7 5b       	subi	r30, 0xB7	; 183
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	10 82       	st	Z, r1
    229a:	fe 01       	movw	r30, r28
    229c:	e8 5b       	subi	r30, 0xB8	; 184
    229e:	ff 4f       	sbci	r31, 0xFF	; 255
    22a0:	10 82       	st	Z, r1
	uint8 Enter_flag=0;
    22a2:	fe 01       	movw	r30, r28
    22a4:	e9 5b       	subi	r30, 0xB9	; 185
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	10 82       	st	Z, r1
	 * 0 initial value
	 * compare value =46875
	 * CPU frequency divided by 64 prescale
	 * timer compare mode
	 */
	Timer1_ConfigType Timer_Conf={0,46875,pre64,compare};
    22aa:	ce 01       	movw	r24, r28
    22ac:	86 5a       	subi	r24, 0xA6	; 166
    22ae:	9f 4f       	sbci	r25, 0xFF	; 255
    22b0:	a9 96       	adiw	r28, 0x29	; 41
    22b2:	9f af       	std	Y+63, r25	; 0x3f
    22b4:	8e af       	std	Y+62, r24	; 0x3e
    22b6:	a9 97       	sbiw	r28, 0x29	; 41
    22b8:	83 e0       	ldi	r24, 0x03	; 3
    22ba:	91 e0       	ldi	r25, 0x01	; 1
    22bc:	ab 96       	adiw	r28, 0x2b	; 43
    22be:	9f af       	std	Y+63, r25	; 0x3f
    22c0:	8e af       	std	Y+62, r24	; 0x3e
    22c2:	ab 97       	sbiw	r28, 0x2b	; 43
    22c4:	96 e0       	ldi	r25, 0x06	; 6
    22c6:	ac 96       	adiw	r28, 0x2c	; 44
    22c8:	9f af       	std	Y+63, r25	; 0x3f
    22ca:	ac 97       	sbiw	r28, 0x2c	; 44
    22cc:	ab 96       	adiw	r28, 0x2b	; 43
    22ce:	ee ad       	ldd	r30, Y+62	; 0x3e
    22d0:	ff ad       	ldd	r31, Y+63	; 0x3f
    22d2:	ab 97       	sbiw	r28, 0x2b	; 43
    22d4:	00 80       	ld	r0, Z
    22d6:	ab 96       	adiw	r28, 0x2b	; 43
    22d8:	8e ad       	ldd	r24, Y+62	; 0x3e
    22da:	9f ad       	ldd	r25, Y+63	; 0x3f
    22dc:	ab 97       	sbiw	r28, 0x2b	; 43
    22de:	01 96       	adiw	r24, 0x01	; 1
    22e0:	ab 96       	adiw	r28, 0x2b	; 43
    22e2:	9f af       	std	Y+63, r25	; 0x3f
    22e4:	8e af       	std	Y+62, r24	; 0x3e
    22e6:	ab 97       	sbiw	r28, 0x2b	; 43
    22e8:	a9 96       	adiw	r28, 0x29	; 41
    22ea:	ee ad       	ldd	r30, Y+62	; 0x3e
    22ec:	ff ad       	ldd	r31, Y+63	; 0x3f
    22ee:	a9 97       	sbiw	r28, 0x29	; 41
    22f0:	00 82       	st	Z, r0
    22f2:	a9 96       	adiw	r28, 0x29	; 41
    22f4:	8e ad       	ldd	r24, Y+62	; 0x3e
    22f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    22f8:	a9 97       	sbiw	r28, 0x29	; 41
    22fa:	01 96       	adiw	r24, 0x01	; 1
    22fc:	a9 96       	adiw	r28, 0x29	; 41
    22fe:	9f af       	std	Y+63, r25	; 0x3f
    2300:	8e af       	std	Y+62, r24	; 0x3e
    2302:	a9 97       	sbiw	r28, 0x29	; 41
    2304:	ac 96       	adiw	r28, 0x2c	; 44
    2306:	9f ad       	ldd	r25, Y+63	; 0x3f
    2308:	ac 97       	sbiw	r28, 0x2c	; 44
    230a:	91 50       	subi	r25, 0x01	; 1
    230c:	ac 96       	adiw	r28, 0x2c	; 44
    230e:	9f af       	std	Y+63, r25	; 0x3f
    2310:	ac 97       	sbiw	r28, 0x2c	; 44
    2312:	ac 96       	adiw	r28, 0x2c	; 44
    2314:	ef ad       	ldd	r30, Y+63	; 0x3f
    2316:	ac 97       	sbiw	r28, 0x2c	; 44
    2318:	ee 23       	and	r30, r30
    231a:	c1 f6       	brne	.-80     	; 0x22cc <main+0x72>

	/* store # and \0 in the last 2 elements in the arrays to match the UART format*/
	arr1[5]='#';
    231c:	fe 01       	movw	r30, r28
    231e:	e4 5b       	subi	r30, 0xB4	; 180
    2320:	ff 4f       	sbci	r31, 0xFF	; 255
    2322:	83 e2       	ldi	r24, 0x23	; 35
    2324:	85 83       	std	Z+5, r24	; 0x05
	arr1[6]='\0';
    2326:	fe 01       	movw	r30, r28
    2328:	e4 5b       	subi	r30, 0xB4	; 180
    232a:	ff 4f       	sbci	r31, 0xFF	; 255
    232c:	16 82       	std	Z+6, r1	; 0x06
	arr2[5]='#';
    232e:	fe 01       	movw	r30, r28
    2330:	ed 5a       	subi	r30, 0xAD	; 173
    2332:	ff 4f       	sbci	r31, 0xFF	; 255
    2334:	83 e2       	ldi	r24, 0x23	; 35
    2336:	85 83       	std	Z+5, r24	; 0x05
	arr2[6]='\0';
    2338:	fe 01       	movw	r30, r28
    233a:	ed 5a       	subi	r30, 0xAD	; 173
    233c:	ff 4f       	sbci	r31, 0xFF	; 255
    233e:	16 82       	std	Z+6, r1	; 0x06

	Timer1_setCallBack(delay_3SEC); /* Set the Call back function pointer in the timer driver */
    2340:	81 e2       	ldi	r24, 0x21	; 33
    2342:	91 e1       	ldi	r25, 0x11	; 17
    2344:	0e 94 6a 07 	call	0xed4	; 0xed4 <Timer1_setCallBack>

	/* Initialize both the LCD and UART driver */
	UART_ConfigType uart_Config={eight_bit,disabled,One_bit,9600};
    2348:	ce 01       	movw	r24, r28
    234a:	80 5a       	subi	r24, 0xA0	; 160
    234c:	9f 4f       	sbci	r25, 0xFF	; 255
    234e:	ae 96       	adiw	r28, 0x2e	; 46
    2350:	9f af       	std	Y+63, r25	; 0x3f
    2352:	8e af       	std	Y+62, r24	; 0x3e
    2354:	ae 97       	sbiw	r28, 0x2e	; 46
    2356:	8c ef       	ldi	r24, 0xFC	; 252
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	e0 96       	adiw	r28, 0x30	; 48
    235c:	9f af       	std	Y+63, r25	; 0x3f
    235e:	8e af       	std	Y+62, r24	; 0x3e
    2360:	e0 97       	sbiw	r28, 0x30	; 48
    2362:	97 e0       	ldi	r25, 0x07	; 7
    2364:	e1 96       	adiw	r28, 0x31	; 49
    2366:	9f af       	std	Y+63, r25	; 0x3f
    2368:	e1 97       	sbiw	r28, 0x31	; 49
    236a:	e0 96       	adiw	r28, 0x30	; 48
    236c:	ee ad       	ldd	r30, Y+62	; 0x3e
    236e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2370:	e0 97       	sbiw	r28, 0x30	; 48
    2372:	00 80       	ld	r0, Z
    2374:	e0 96       	adiw	r28, 0x30	; 48
    2376:	8e ad       	ldd	r24, Y+62	; 0x3e
    2378:	9f ad       	ldd	r25, Y+63	; 0x3f
    237a:	e0 97       	sbiw	r28, 0x30	; 48
    237c:	01 96       	adiw	r24, 0x01	; 1
    237e:	e0 96       	adiw	r28, 0x30	; 48
    2380:	9f af       	std	Y+63, r25	; 0x3f
    2382:	8e af       	std	Y+62, r24	; 0x3e
    2384:	e0 97       	sbiw	r28, 0x30	; 48
    2386:	ae 96       	adiw	r28, 0x2e	; 46
    2388:	ee ad       	ldd	r30, Y+62	; 0x3e
    238a:	ff ad       	ldd	r31, Y+63	; 0x3f
    238c:	ae 97       	sbiw	r28, 0x2e	; 46
    238e:	00 82       	st	Z, r0
    2390:	ae 96       	adiw	r28, 0x2e	; 46
    2392:	8e ad       	ldd	r24, Y+62	; 0x3e
    2394:	9f ad       	ldd	r25, Y+63	; 0x3f
    2396:	ae 97       	sbiw	r28, 0x2e	; 46
    2398:	01 96       	adiw	r24, 0x01	; 1
    239a:	ae 96       	adiw	r28, 0x2e	; 46
    239c:	9f af       	std	Y+63, r25	; 0x3f
    239e:	8e af       	std	Y+62, r24	; 0x3e
    23a0:	ae 97       	sbiw	r28, 0x2e	; 46
    23a2:	e1 96       	adiw	r28, 0x31	; 49
    23a4:	9f ad       	ldd	r25, Y+63	; 0x3f
    23a6:	e1 97       	sbiw	r28, 0x31	; 49
    23a8:	91 50       	subi	r25, 0x01	; 1
    23aa:	e1 96       	adiw	r28, 0x31	; 49
    23ac:	9f af       	std	Y+63, r25	; 0x3f
    23ae:	e1 97       	sbiw	r28, 0x31	; 49
    23b0:	e1 96       	adiw	r28, 0x31	; 49
    23b2:	ef ad       	ldd	r30, Y+63	; 0x3f
    23b4:	e1 97       	sbiw	r28, 0x31	; 49
    23b6:	ee 23       	and	r30, r30
    23b8:	c1 f6       	brne	.-80     	; 0x236a <main+0x110>
	UART_init(&uart_Config);
    23ba:	ce 01       	movw	r24, r28
    23bc:	80 5a       	subi	r24, 0xA0	; 160
    23be:	9f 4f       	sbci	r25, 0xFF	; 255
    23c0:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>
	LCD_init();
    23c4:	0e 94 9f 07 	call	0xf3e	; 0xf3e <LCD_init>



	LCD_displayString("Plz Enter Pass");
    23c8:	80 e6       	ldi	r24, 0x60	; 96
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_displayString>
	LCD_moveCursor(1,0);
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	60 e0       	ldi	r22, 0x00	; 0
    23d4:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_moveCursor>


	while(1)
	{

		key = KEYPAD_getPressedKey(); /* store the pressed key value*/
    23d8:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <KEYPAD_getPressedKey>
    23dc:	fe 01       	movw	r30, r28
    23de:	e7 5b       	subi	r30, 0xB7	; 183
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	80 83       	st	Z, r24

		/* condition to store the first entered pass */
		if((Enter_flag==0)&&(i<5))
    23e4:	fe 01       	movw	r30, r28
    23e6:	e9 5b       	subi	r30, 0xB9	; 185
    23e8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ea:	80 81       	ld	r24, Z
    23ec:	88 23       	and	r24, r24
    23ee:	19 f5       	brne	.+70     	; 0x2436 <main+0x1dc>
    23f0:	fe 01       	movw	r30, r28
    23f2:	e5 5b       	subi	r30, 0xB5	; 181
    23f4:	ff 4f       	sbci	r31, 0xFF	; 255
    23f6:	80 81       	ld	r24, Z
    23f8:	85 30       	cpi	r24, 0x05	; 5
    23fa:	e8 f4       	brcc	.+58     	; 0x2436 <main+0x1dc>
		{
			arr1[i]=key; /* store the key value in the array*/
    23fc:	fe 01       	movw	r30, r28
    23fe:	e5 5b       	subi	r30, 0xB5	; 181
    2400:	ff 4f       	sbci	r31, 0xFF	; 255
    2402:	80 81       	ld	r24, Z
    2404:	28 2f       	mov	r18, r24
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	ce 01       	movw	r24, r28
    240a:	84 5b       	subi	r24, 0xB4	; 180
    240c:	9f 4f       	sbci	r25, 0xFF	; 255
    240e:	dc 01       	movw	r26, r24
    2410:	a2 0f       	add	r26, r18
    2412:	b3 1f       	adc	r27, r19
    2414:	fe 01       	movw	r30, r28
    2416:	e7 5b       	subi	r30, 0xB7	; 183
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	80 81       	ld	r24, Z
    241c:	8c 93       	st	X, r24
			LCD_displayCharacter('*'); /* display * with every key pressed*/
    241e:	8a e2       	ldi	r24, 0x2A	; 42
    2420:	0e 94 34 0a 	call	0x1468	; 0x1468 <LCD_displayCharacter>
			i++; /* increment the index  every loop*/
    2424:	de 01       	movw	r26, r28
    2426:	a5 5b       	subi	r26, 0xB5	; 181
    2428:	bf 4f       	sbci	r27, 0xFF	; 255
    242a:	fe 01       	movw	r30, r28
    242c:	e5 5b       	subi	r30, 0xB5	; 181
    242e:	ff 4f       	sbci	r31, 0xFF	; 255
    2430:	80 81       	ld	r24, Z
    2432:	8f 5f       	subi	r24, 0xFF	; 255
    2434:	8c 93       	st	X, r24
		}

		/* when enter key is pressed  first time*/
		if((key ==13)&&(Enter_flag==0))
    2436:	fe 01       	movw	r30, r28
    2438:	e7 5b       	subi	r30, 0xB7	; 183
    243a:	ff 4f       	sbci	r31, 0xFF	; 255
    243c:	80 81       	ld	r24, Z
    243e:	8d 30       	cpi	r24, 0x0D	; 13
    2440:	59 f4       	brne	.+22     	; 0x2458 <main+0x1fe>
    2442:	fe 01       	movw	r30, r28
    2444:	e9 5b       	subi	r30, 0xB9	; 185
    2446:	ff 4f       	sbci	r31, 0xFF	; 255
    2448:	80 81       	ld	r24, Z
    244a:	88 23       	and	r24, r24
    244c:	29 f4       	brne	.+10     	; 0x2458 <main+0x1fe>
			Enter_flag = 1; /* store one in the enter flag to start the next step*/
    244e:	fe 01       	movw	r30, r28
    2450:	e9 5b       	subi	r30, 0xB9	; 185
    2452:	ff 4f       	sbci	r31, 0xFF	; 255
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	80 83       	st	Z, r24

		if(Enter_flag == 1)
    2458:	fe 01       	movw	r30, r28
    245a:	e9 5b       	subi	r30, 0xB9	; 185
    245c:	ff 4f       	sbci	r31, 0xFF	; 255
    245e:	80 81       	ld	r24, Z
    2460:	81 30       	cpi	r24, 0x01	; 1
    2462:	21 f5       	brne	.+72     	; 0x24ac <main+0x252>
		{
			LCD_clearScreen(); /* clear screen*/
    2464:	0e 94 ca 0c 	call	0x1994	; 0x1994 <LCD_clearScreen>
			LCD_moveCursor(0,0);
    2468:	80 e0       	ldi	r24, 0x00	; 0
    246a:	60 e0       	ldi	r22, 0x00	; 0
    246c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_moveCursor>
			LCD_displayString("Plz re-enter the");
    2470:	8f e6       	ldi	r24, 0x6F	; 111
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_displayString>
			LCD_moveCursor(1,0);
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	60 e0       	ldi	r22, 0x00	; 0
    247c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_moveCursor>
			LCD_displayString("Same pass:");
    2480:	80 e8       	ldi	r24, 0x80	; 128
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_displayString>
			LCD_moveCursor(1,11);
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	6b e0       	ldi	r22, 0x0B	; 11
    248c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_moveCursor>
			i=0;
    2490:	fe 01       	movw	r30, r28
    2492:	e5 5b       	subi	r30, 0xB5	; 181
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	10 82       	st	Z, r1
			Enter_flag++; /*increment enter flag to start the next step*/
    2498:	de 01       	movw	r26, r28
    249a:	a9 5b       	subi	r26, 0xB9	; 185
    249c:	bf 4f       	sbci	r27, 0xFF	; 255
    249e:	fe 01       	movw	r30, r28
    24a0:	e9 5b       	subi	r30, 0xB9	; 185
    24a2:	ff 4f       	sbci	r31, 0xFF	; 255
    24a4:	80 81       	ld	r24, Z
    24a6:	8f 5f       	subi	r24, 0xFF	; 255
    24a8:	8c 93       	st	X, r24
    24aa:	3b c0       	rjmp	.+118    	; 0x2522 <main+0x2c8>
		}
		else if((Enter_flag == 2)&&(i<5)) /* take the reenter pass and save it in array2*/
    24ac:	fe 01       	movw	r30, r28
    24ae:	e9 5b       	subi	r30, 0xB9	; 185
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	80 81       	ld	r24, Z
    24b4:	82 30       	cpi	r24, 0x02	; 2
    24b6:	21 f5       	brne	.+72     	; 0x2500 <main+0x2a6>
    24b8:	fe 01       	movw	r30, r28
    24ba:	e5 5b       	subi	r30, 0xB5	; 181
    24bc:	ff 4f       	sbci	r31, 0xFF	; 255
    24be:	80 81       	ld	r24, Z
    24c0:	85 30       	cpi	r24, 0x05	; 5
    24c2:	f0 f4       	brcc	.+60     	; 0x2500 <main+0x2a6>
		{
			arr2[i]=key;
    24c4:	fe 01       	movw	r30, r28
    24c6:	e5 5b       	subi	r30, 0xB5	; 181
    24c8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ca:	80 81       	ld	r24, Z
    24cc:	28 2f       	mov	r18, r24
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	ce 01       	movw	r24, r28
    24d2:	8d 5a       	subi	r24, 0xAD	; 173
    24d4:	9f 4f       	sbci	r25, 0xFF	; 255
    24d6:	dc 01       	movw	r26, r24
    24d8:	a2 0f       	add	r26, r18
    24da:	b3 1f       	adc	r27, r19
    24dc:	fe 01       	movw	r30, r28
    24de:	e7 5b       	subi	r30, 0xB7	; 183
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	80 81       	ld	r24, Z
    24e4:	8c 93       	st	X, r24
			LCD_displayCharacter('*');
    24e6:	8a e2       	ldi	r24, 0x2A	; 42
    24e8:	0e 94 34 0a 	call	0x1468	; 0x1468 <LCD_displayCharacter>
			i++;
    24ec:	de 01       	movw	r26, r28
    24ee:	a5 5b       	subi	r26, 0xB5	; 181
    24f0:	bf 4f       	sbci	r27, 0xFF	; 255
    24f2:	fe 01       	movw	r30, r28
    24f4:	e5 5b       	subi	r30, 0xB5	; 181
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	80 81       	ld	r24, Z
    24fa:	8f 5f       	subi	r24, 0xFF	; 255
    24fc:	8c 93       	st	X, r24
    24fe:	11 c0       	rjmp	.+34     	; 0x2522 <main+0x2c8>

		}
		/* when enter key is pressed  second time*/
		else if((key ==13)&&(Enter_flag == 2))
    2500:	fe 01       	movw	r30, r28
    2502:	e7 5b       	subi	r30, 0xB7	; 183
    2504:	ff 4f       	sbci	r31, 0xFF	; 255
    2506:	80 81       	ld	r24, Z
    2508:	8d 30       	cpi	r24, 0x0D	; 13
    250a:	59 f4       	brne	.+22     	; 0x2522 <main+0x2c8>
    250c:	fe 01       	movw	r30, r28
    250e:	e9 5b       	subi	r30, 0xB9	; 185
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	80 81       	ld	r24, Z
    2514:	82 30       	cpi	r24, 0x02	; 2
    2516:	29 f4       	brne	.+10     	; 0x2522 <main+0x2c8>
		{
			Enter_flag = 3;/*increment enter flag to start the next step*/
    2518:	fe 01       	movw	r30, r28
    251a:	e9 5b       	subi	r30, 0xB9	; 185
    251c:	ff 4f       	sbci	r31, 0xFF	; 255
    251e:	83 e0       	ldi	r24, 0x03	; 3
    2520:	80 83       	st	Z, r24
		}

		if(Enter_flag == 3) /* start sending the 2 passes to the control ECU*/
    2522:	fe 01       	movw	r30, r28
    2524:	e9 5b       	subi	r30, 0xB9	; 185
    2526:	ff 4f       	sbci	r31, 0xFF	; 255
    2528:	80 81       	ld	r24, Z
    252a:	83 30       	cpi	r24, 0x03	; 3
    252c:	09 f0       	breq	.+2      	; 0x2530 <main+0x2d6>
    252e:	67 c4       	rjmp	.+2254   	; 0x2dfe <main+0xba4>
		{
			UART_sendByte(MC1_READY); /* send MC1_READY to the control ECU to notice him i'm start sending*/
    2530:	80 e1       	ldi	r24, 0x10	; 16
    2532:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
			UART_sendString(arr1); /* send first taken pass*/
    2536:	ce 01       	movw	r24, r28
    2538:	84 5b       	subi	r24, 0xB4	; 180
    253a:	9f 4f       	sbci	r25, 0xFF	; 255
    253c:	0e 94 4a 06 	call	0xc94	; 0xc94 <UART_sendString>
			UART_sendString(arr2); /* send the second taken pass*/
    2540:	ce 01       	movw	r24, r28
    2542:	8d 5a       	subi	r24, 0xAD	; 173
    2544:	9f 4f       	sbci	r25, 0xFF	; 255
    2546:	0e 94 4a 06 	call	0xc94	; 0xc94 <UART_sendString>

			/* wait until the MC2 finished its operations and it is start sending*/
			while(UART_recieveByte() != MC1_READY){}
    254a:	0e 94 3b 06 	call	0xc76	; 0xc76 <UART_recieveByte>
    254e:	80 31       	cpi	r24, 0x10	; 16
    2550:	e1 f7       	brne	.-8      	; 0x254a <main+0x2f0>
			if(UART_recieveByte() == MATCHED) /* check if the MC2 send matched passes*/
    2552:	0e 94 3b 06 	call	0xc76	; 0xc76 <UART_recieveByte>
    2556:	8f 30       	cpi	r24, 0x0F	; 15
    2558:	09 f0       	breq	.+2      	; 0x255c <main+0x302>
    255a:	3f c4       	rjmp	.+2174   	; 0x2dda <main+0xb80>
			{
				/* display the menu on lcd*/
				LCD_clearScreen();
    255c:	0e 94 ca 0c 	call	0x1994	; 0x1994 <LCD_clearScreen>
				LCD_displayString("+ : Open Door");
    2560:	8b e8       	ldi	r24, 0x8B	; 139
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_displayString>
				LCD_moveCursor(1, 0);
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	60 e0       	ldi	r22, 0x00	; 0
    256c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_moveCursor>
				LCD_displayString("- : Change Pass");
    2570:	89 e9       	ldi	r24, 0x99	; 153
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_displayString>
				/* wait until the user enter '+' or '-' and store it in menu */
				do{
					menu = KEYPAD_getPressedKey();
    2578:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <KEYPAD_getPressedKey>
    257c:	fe 01       	movw	r30, r28
    257e:	e8 5b       	subi	r30, 0xB8	; 184
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	80 83       	st	Z, r24
				}while(!((menu=='+')||(menu=='-')));
    2584:	fe 01       	movw	r30, r28
    2586:	e8 5b       	subi	r30, 0xB8	; 184
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	80 81       	ld	r24, Z
    258c:	8b 32       	cpi	r24, 0x2B	; 43
    258e:	31 f0       	breq	.+12     	; 0x259c <main+0x342>
    2590:	fe 01       	movw	r30, r28
    2592:	e8 5b       	subi	r30, 0xB8	; 184
    2594:	ff 4f       	sbci	r31, 0xFF	; 255
    2596:	80 81       	ld	r24, Z
    2598:	8d 32       	cpi	r24, 0x2D	; 45
    259a:	71 f7       	brne	.-36     	; 0x2578 <main+0x31e>
				if( menu== '+')
    259c:	fe 01       	movw	r30, r28
    259e:	e8 5b       	subi	r30, 0xB8	; 184
    25a0:	ff 4f       	sbci	r31, 0xFF	; 255
    25a2:	80 81       	ld	r24, Z
    25a4:	8b 32       	cpi	r24, 0x2B	; 43
    25a6:	09 f0       	breq	.+2      	; 0x25aa <main+0x350>
    25a8:	3f c2       	rjmp	.+1150   	; 0x2a28 <main+0x7ce>
				{
					/* display enter pass on LCD*/
					LCD_clearScreen();
    25aa:	0e 94 ca 0c 	call	0x1994	; 0x1994 <LCD_clearScreen>
					LCD_displayString("Plez Enter Pass");
    25ae:	89 ea       	ldi	r24, 0xA9	; 169
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_displayString>
					LCD_moveCursor(1,0);
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	60 e0       	ldi	r22, 0x00	; 0
    25ba:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_moveCursor>
					/* for loop to take the pass entered by user and store it on array1*/
					for(i=0;i<5;i++)
    25be:	fe 01       	movw	r30, r28
    25c0:	e5 5b       	subi	r30, 0xB5	; 181
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	10 82       	st	Z, r1
    25c6:	a1 c0       	rjmp	.+322    	; 0x270a <main+0x4b0>
					{
						arr1[i]=KEYPAD_getPressedKey();
    25c8:	fe 01       	movw	r30, r28
    25ca:	e5 5b       	subi	r30, 0xB5	; 181
    25cc:	ff 4f       	sbci	r31, 0xFF	; 255
    25ce:	80 81       	ld	r24, Z
    25d0:	08 2f       	mov	r16, r24
    25d2:	10 e0       	ldi	r17, 0x00	; 0
    25d4:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <KEYPAD_getPressedKey>
    25d8:	28 2f       	mov	r18, r24
    25da:	ce 01       	movw	r24, r28
    25dc:	84 5b       	subi	r24, 0xB4	; 180
    25de:	9f 4f       	sbci	r25, 0xFF	; 255
    25e0:	fc 01       	movw	r30, r24
    25e2:	e0 0f       	add	r30, r16
    25e4:	f1 1f       	adc	r31, r17
    25e6:	20 83       	st	Z, r18
						LCD_displayCharacter('*');
    25e8:	8a e2       	ldi	r24, 0x2A	; 42
    25ea:	0e 94 34 0a 	call	0x1468	; 0x1468 <LCD_displayCharacter>
    25ee:	fe 01       	movw	r30, r28
    25f0:	ed 5b       	subi	r30, 0xBD	; 189
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	80 e0       	ldi	r24, 0x00	; 0
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	aa ef       	ldi	r26, 0xFA	; 250
    25fa:	b3 e4       	ldi	r27, 0x43	; 67
    25fc:	80 83       	st	Z, r24
    25fe:	91 83       	std	Z+1, r25	; 0x01
    2600:	a2 83       	std	Z+2, r26	; 0x02
    2602:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2604:	8e 01       	movw	r16, r28
    2606:	01 5c       	subi	r16, 0xC1	; 193
    2608:	1f 4f       	sbci	r17, 0xFF	; 255
    260a:	fe 01       	movw	r30, r28
    260c:	ed 5b       	subi	r30, 0xBD	; 189
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	60 81       	ld	r22, Z
    2612:	71 81       	ldd	r23, Z+1	; 0x01
    2614:	82 81       	ldd	r24, Z+2	; 0x02
    2616:	93 81       	ldd	r25, Z+3	; 0x03
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	4a e7       	ldi	r20, 0x7A	; 122
    261e:	53 e4       	ldi	r21, 0x43	; 67
    2620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	f8 01       	movw	r30, r16
    262a:	80 83       	st	Z, r24
    262c:	91 83       	std	Z+1, r25	; 0x01
    262e:	a2 83       	std	Z+2, r26	; 0x02
    2630:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2632:	fe 01       	movw	r30, r28
    2634:	ff 96       	adiw	r30, 0x3f	; 63
    2636:	60 81       	ld	r22, Z
    2638:	71 81       	ldd	r23, Z+1	; 0x01
    263a:	82 81       	ldd	r24, Z+2	; 0x02
    263c:	93 81       	ldd	r25, Z+3	; 0x03
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	40 e8       	ldi	r20, 0x80	; 128
    2644:	5f e3       	ldi	r21, 0x3F	; 63
    2646:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    264a:	88 23       	and	r24, r24
    264c:	2c f4       	brge	.+10     	; 0x2658 <main+0x3fe>
		__ticks = 1;
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	9e af       	std	Y+62, r25	; 0x3e
    2654:	8d af       	std	Y+61, r24	; 0x3d
    2656:	46 c0       	rjmp	.+140    	; 0x26e4 <main+0x48a>
	else if (__tmp > 65535)
    2658:	fe 01       	movw	r30, r28
    265a:	ff 96       	adiw	r30, 0x3f	; 63
    265c:	60 81       	ld	r22, Z
    265e:	71 81       	ldd	r23, Z+1	; 0x01
    2660:	82 81       	ldd	r24, Z+2	; 0x02
    2662:	93 81       	ldd	r25, Z+3	; 0x03
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	3f ef       	ldi	r19, 0xFF	; 255
    2668:	4f e7       	ldi	r20, 0x7F	; 127
    266a:	57 e4       	ldi	r21, 0x47	; 71
    266c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2670:	18 16       	cp	r1, r24
    2672:	64 f5       	brge	.+88     	; 0x26cc <main+0x472>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2674:	fe 01       	movw	r30, r28
    2676:	ed 5b       	subi	r30, 0xBD	; 189
    2678:	ff 4f       	sbci	r31, 0xFF	; 255
    267a:	60 81       	ld	r22, Z
    267c:	71 81       	ldd	r23, Z+1	; 0x01
    267e:	82 81       	ldd	r24, Z+2	; 0x02
    2680:	93 81       	ldd	r25, Z+3	; 0x03
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	40 e2       	ldi	r20, 0x20	; 32
    2688:	51 e4       	ldi	r21, 0x41	; 65
    268a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	bc 01       	movw	r22, r24
    2694:	cd 01       	movw	r24, r26
    2696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	9e af       	std	Y+62, r25	; 0x3e
    26a0:	8d af       	std	Y+61, r24	; 0x3d
    26a2:	0f c0       	rjmp	.+30     	; 0x26c2 <main+0x468>
    26a4:	89 e1       	ldi	r24, 0x19	; 25
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	9c af       	std	Y+60, r25	; 0x3c
    26aa:	8b af       	std	Y+59, r24	; 0x3b
    26ac:	8b ad       	ldd	r24, Y+59	; 0x3b
    26ae:	9c ad       	ldd	r25, Y+60	; 0x3c
    26b0:	01 97       	sbiw	r24, 0x01	; 1
    26b2:	f1 f7       	brne	.-4      	; 0x26b0 <main+0x456>
    26b4:	9c af       	std	Y+60, r25	; 0x3c
    26b6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    26ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    26bc:	01 97       	sbiw	r24, 0x01	; 1
    26be:	9e af       	std	Y+62, r25	; 0x3e
    26c0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    26c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    26c6:	00 97       	sbiw	r24, 0x00	; 0
    26c8:	69 f7       	brne	.-38     	; 0x26a4 <main+0x44a>
    26ca:	16 c0       	rjmp	.+44     	; 0x26f8 <main+0x49e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26cc:	fe 01       	movw	r30, r28
    26ce:	ff 96       	adiw	r30, 0x3f	; 63
    26d0:	60 81       	ld	r22, Z
    26d2:	71 81       	ldd	r23, Z+1	; 0x01
    26d4:	82 81       	ldd	r24, Z+2	; 0x02
    26d6:	93 81       	ldd	r25, Z+3	; 0x03
    26d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	9e af       	std	Y+62, r25	; 0x3e
    26e2:	8d af       	std	Y+61, r24	; 0x3d
    26e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    26e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    26e8:	9a af       	std	Y+58, r25	; 0x3a
    26ea:	89 af       	std	Y+57, r24	; 0x39
    26ec:	89 ad       	ldd	r24, Y+57	; 0x39
    26ee:	9a ad       	ldd	r25, Y+58	; 0x3a
    26f0:	01 97       	sbiw	r24, 0x01	; 1
    26f2:	f1 f7       	brne	.-4      	; 0x26f0 <main+0x496>
    26f4:	9a af       	std	Y+58, r25	; 0x3a
    26f6:	89 af       	std	Y+57, r24	; 0x39
					/* display enter pass on LCD*/
					LCD_clearScreen();
					LCD_displayString("Plez Enter Pass");
					LCD_moveCursor(1,0);
					/* for loop to take the pass entered by user and store it on array1*/
					for(i=0;i<5;i++)
    26f8:	de 01       	movw	r26, r28
    26fa:	a5 5b       	subi	r26, 0xB5	; 181
    26fc:	bf 4f       	sbci	r27, 0xFF	; 255
    26fe:	fe 01       	movw	r30, r28
    2700:	e5 5b       	subi	r30, 0xB5	; 181
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	80 81       	ld	r24, Z
    2706:	8f 5f       	subi	r24, 0xFF	; 255
    2708:	8c 93       	st	X, r24
    270a:	fe 01       	movw	r30, r28
    270c:	e5 5b       	subi	r30, 0xB5	; 181
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	80 81       	ld	r24, Z
    2712:	85 30       	cpi	r24, 0x05	; 5
    2714:	08 f4       	brcc	.+2      	; 0x2718 <main+0x4be>
    2716:	58 cf       	rjmp	.-336    	; 0x25c8 <main+0x36e>
						arr1[i]=KEYPAD_getPressedKey();
						LCD_displayCharacter('*');
						/* wait half sec to avoid high running operations while pressing the keypad buttons*/
						_delay_ms(500);
					}
					if(KEYPAD_getPressedKey() ==13)/* when enter is pressed*/
    2718:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <KEYPAD_getPressedKey>
    271c:	8d 30       	cpi	r24, 0x0D	; 13
    271e:	09 f0       	breq	.+2      	; 0x2722 <main+0x4c8>
    2720:	6e c3       	rjmp	.+1756   	; 0x2dfe <main+0xba4>
					{
						UART_sendByte(MC1_READY);/* send MC1_READY to the control ECU to notice him i'm start sending*/
    2722:	80 e1       	ldi	r24, 0x10	; 16
    2724:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
						UART_sendString(arr1);/* send taken pass*/
    2728:	ce 01       	movw	r24, r28
    272a:	84 5b       	subi	r24, 0xB4	; 180
    272c:	9f 4f       	sbci	r25, 0xFF	; 255
    272e:	0e 94 4a 06 	call	0xc94	; 0xc94 <UART_sendString>
						UART_sendByte('+'); /* send the running operation symbol*/
    2732:	8b e2       	ldi	r24, 0x2B	; 43
    2734:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>

						/* wait until the MC2 finished its operations and it is start sending*/
						while(UART_recieveByte() != MC1_READY){}
    2738:	0e 94 3b 06 	call	0xc76	; 0xc76 <UART_recieveByte>
    273c:	80 31       	cpi	r24, 0x10	; 16
    273e:	e1 f7       	brne	.-8      	; 0x2738 <main+0x4de>
						if(UART_recieveByte() == MATCHED)/* check if the MC2 send matched passes*/
    2740:	0e 94 3b 06 	call	0xc76	; 0xc76 <UART_recieveByte>
    2744:	8f 30       	cpi	r24, 0x0F	; 15
    2746:	09 f0       	breq	.+2      	; 0x274a <main+0x4f0>
    2748:	3e c0       	rjmp	.+124    	; 0x27c6 <main+0x56c>
						{

							LCD_clearScreen(); /* clear screen*/
    274a:	0e 94 ca 0c 	call	0x1994	; 0x1994 <LCD_clearScreen>
							LCD_displayString("Door is Unlocking");
    274e:	89 eb       	ldi	r24, 0xB9	; 185
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_displayString>
							Timer1_init(&Timer_Conf);/* Initialize timer 1*/
    2756:	ce 01       	movw	r24, r28
    2758:	86 5a       	subi	r24, 0xA6	; 166
    275a:	9f 4f       	sbci	r25, 0xFF	; 255
    275c:	0e 94 1c 07 	call	0xe38	; 0xe38 <Timer1_init>
							while(g_tick!=5){}/* wait until the g_tick increment to 5 (5*3=15SEC)*/
    2760:	80 91 0c 01 	lds	r24, 0x010C
    2764:	85 30       	cpi	r24, 0x05	; 5
    2766:	e1 f7       	brne	.-8      	; 0x2760 <main+0x506>
							g_tick=0; /* clear the g_tick for next time*/
    2768:	10 92 0c 01 	sts	0x010C, r1
							LCD_clearScreen();
    276c:	0e 94 ca 0c 	call	0x1994	; 0x1994 <LCD_clearScreen>
							LCD_displayString("Door is open");
    2770:	8b ec       	ldi	r24, 0xCB	; 203
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_displayString>
							while(g_tick!=1){}/* wait until the g_tick increment to 1 (1*3=3SEC)*/
    2778:	80 91 0c 01 	lds	r24, 0x010C
    277c:	81 30       	cpi	r24, 0x01	; 1
    277e:	e1 f7       	brne	.-8      	; 0x2778 <main+0x51e>
							g_tick=0;/* clear the g_tick for next time*/
    2780:	10 92 0c 01 	sts	0x010C, r1
							LCD_clearScreen();
    2784:	0e 94 ca 0c 	call	0x1994	; 0x1994 <LCD_clearScreen>
							LCD_displayString("Door is locking");
    2788:	88 ed       	ldi	r24, 0xD8	; 216
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_displayString>
							while(g_tick!=5){}/* wait until the g_tick increment to 5 (5*3=15SEC)*/
    2790:	80 91 0c 01 	lds	r24, 0x010C
    2794:	85 30       	cpi	r24, 0x05	; 5
    2796:	e1 f7       	brne	.-8      	; 0x2790 <main+0x536>
							g_tick=0; /* clear the g_tick for next time*/
    2798:	10 92 0c 01 	sts	0x010C, r1
							Timer1_deInit(); /* deinit timer 1*/
    279c:	0e 94 7c 07 	call	0xef8	; 0xef8 <Timer1_deInit>
							LCD_clearScreen();
    27a0:	0e 94 ca 0c 	call	0x1994	; 0x1994 <LCD_clearScreen>
							LCD_displayString("Plz Enter Pass");
    27a4:	80 e6       	ldi	r24, 0x60	; 96
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_displayString>
							LCD_moveCursor(1,0);
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	60 e0       	ldi	r22, 0x00	; 0
    27b0:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_moveCursor>
							i=0; /* clear i variable to repeat step 1*/
    27b4:	fe 01       	movw	r30, r28
    27b6:	e5 5b       	subi	r30, 0xB5	; 181
    27b8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ba:	10 82       	st	Z, r1
							Enter_flag =0; /* clear Enter_flag variable to repeat step 1*/
    27bc:	fe 01       	movw	r30, r28
    27be:	e9 5b       	subi	r30, 0xB9	; 185
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	10 82       	st	Z, r1
    27c4:	1c c3       	rjmp	.+1592   	; 0x2dfe <main+0xba4>

						}
						else
						{
							/* repeat the previous operations twice or until the user enter correct pass*/
							for(j=0;j<2;j++)
    27c6:	fe 01       	movw	r30, r28
    27c8:	e6 5b       	subi	r30, 0xB6	; 182
    27ca:	ff 4f       	sbci	r31, 0xFF	; 255
    27cc:	10 82       	st	Z, r1
    27ce:	03 c1       	rjmp	.+518    	; 0x29d6 <main+0x77c>
							{
								LCD_clearScreen();
    27d0:	0e 94 ca 0c 	call	0x1994	; 0x1994 <LCD_clearScreen>
								LCD_displayString("Plez Enter Pass");
    27d4:	89 ea       	ldi	r24, 0xA9	; 169
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_displayString>
								LCD_moveCursor(1,0);
    27dc:	81 e0       	ldi	r24, 0x01	; 1
    27de:	60 e0       	ldi	r22, 0x00	; 0
    27e0:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_moveCursor>
								for(i=0;i<5;i++)
    27e4:	fe 01       	movw	r30, r28
    27e6:	e5 5b       	subi	r30, 0xB5	; 181
    27e8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ea:	10 82       	st	Z, r1
    27ec:	8e c0       	rjmp	.+284    	; 0x290a <main+0x6b0>
								{
									arr1[i]=KEYPAD_getPressedKey();
    27ee:	fe 01       	movw	r30, r28
    27f0:	e5 5b       	subi	r30, 0xB5	; 181
    27f2:	ff 4f       	sbci	r31, 0xFF	; 255
    27f4:	80 81       	ld	r24, Z
    27f6:	08 2f       	mov	r16, r24
    27f8:	10 e0       	ldi	r17, 0x00	; 0
    27fa:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <KEYPAD_getPressedKey>
    27fe:	28 2f       	mov	r18, r24
    2800:	ce 01       	movw	r24, r28
    2802:	84 5b       	subi	r24, 0xB4	; 180
    2804:	9f 4f       	sbci	r25, 0xFF	; 255
    2806:	fc 01       	movw	r30, r24
    2808:	e0 0f       	add	r30, r16
    280a:	f1 1f       	adc	r31, r17
    280c:	20 83       	st	Z, r18
									LCD_displayCharacter('*');
    280e:	8a e2       	ldi	r24, 0x2A	; 42
    2810:	0e 94 34 0a 	call	0x1468	; 0x1468 <LCD_displayCharacter>
    2814:	80 e0       	ldi	r24, 0x00	; 0
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	aa ef       	ldi	r26, 0xFA	; 250
    281a:	b3 e4       	ldi	r27, 0x43	; 67
    281c:	8d ab       	std	Y+53, r24	; 0x35
    281e:	9e ab       	std	Y+54, r25	; 0x36
    2820:	af ab       	std	Y+55, r26	; 0x37
    2822:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2824:	6d a9       	ldd	r22, Y+53	; 0x35
    2826:	7e a9       	ldd	r23, Y+54	; 0x36
    2828:	8f a9       	ldd	r24, Y+55	; 0x37
    282a:	98 ad       	ldd	r25, Y+56	; 0x38
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	4a e7       	ldi	r20, 0x7A	; 122
    2832:	53 e4       	ldi	r21, 0x43	; 67
    2834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	89 ab       	std	Y+49, r24	; 0x31
    283e:	9a ab       	std	Y+50, r25	; 0x32
    2840:	ab ab       	std	Y+51, r26	; 0x33
    2842:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2844:	69 a9       	ldd	r22, Y+49	; 0x31
    2846:	7a a9       	ldd	r23, Y+50	; 0x32
    2848:	8b a9       	ldd	r24, Y+51	; 0x33
    284a:	9c a9       	ldd	r25, Y+52	; 0x34
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	40 e8       	ldi	r20, 0x80	; 128
    2852:	5f e3       	ldi	r21, 0x3F	; 63
    2854:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2858:	88 23       	and	r24, r24
    285a:	2c f4       	brge	.+10     	; 0x2866 <main+0x60c>
		__ticks = 1;
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	98 ab       	std	Y+48, r25	; 0x30
    2862:	8f a7       	std	Y+47, r24	; 0x2f
    2864:	3f c0       	rjmp	.+126    	; 0x28e4 <main+0x68a>
	else if (__tmp > 65535)
    2866:	69 a9       	ldd	r22, Y+49	; 0x31
    2868:	7a a9       	ldd	r23, Y+50	; 0x32
    286a:	8b a9       	ldd	r24, Y+51	; 0x33
    286c:	9c a9       	ldd	r25, Y+52	; 0x34
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	3f ef       	ldi	r19, 0xFF	; 255
    2872:	4f e7       	ldi	r20, 0x7F	; 127
    2874:	57 e4       	ldi	r21, 0x47	; 71
    2876:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    287a:	18 16       	cp	r1, r24
    287c:	4c f5       	brge	.+82     	; 0x28d0 <main+0x676>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    287e:	6d a9       	ldd	r22, Y+53	; 0x35
    2880:	7e a9       	ldd	r23, Y+54	; 0x36
    2882:	8f a9       	ldd	r24, Y+55	; 0x37
    2884:	98 ad       	ldd	r25, Y+56	; 0x38
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	40 e2       	ldi	r20, 0x20	; 32
    288c:	51 e4       	ldi	r21, 0x41	; 65
    288e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	bc 01       	movw	r22, r24
    2898:	cd 01       	movw	r24, r26
    289a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	98 ab       	std	Y+48, r25	; 0x30
    28a4:	8f a7       	std	Y+47, r24	; 0x2f
    28a6:	0f c0       	rjmp	.+30     	; 0x28c6 <main+0x66c>
    28a8:	89 e1       	ldi	r24, 0x19	; 25
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	9e a7       	std	Y+46, r25	; 0x2e
    28ae:	8d a7       	std	Y+45, r24	; 0x2d
    28b0:	8d a5       	ldd	r24, Y+45	; 0x2d
    28b2:	9e a5       	ldd	r25, Y+46	; 0x2e
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	f1 f7       	brne	.-4      	; 0x28b4 <main+0x65a>
    28b8:	9e a7       	std	Y+46, r25	; 0x2e
    28ba:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    28be:	98 a9       	ldd	r25, Y+48	; 0x30
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	98 ab       	std	Y+48, r25	; 0x30
    28c4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    28c8:	98 a9       	ldd	r25, Y+48	; 0x30
    28ca:	00 97       	sbiw	r24, 0x00	; 0
    28cc:	69 f7       	brne	.-38     	; 0x28a8 <main+0x64e>
    28ce:	14 c0       	rjmp	.+40     	; 0x28f8 <main+0x69e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d0:	69 a9       	ldd	r22, Y+49	; 0x31
    28d2:	7a a9       	ldd	r23, Y+50	; 0x32
    28d4:	8b a9       	ldd	r24, Y+51	; 0x33
    28d6:	9c a9       	ldd	r25, Y+52	; 0x34
    28d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	98 ab       	std	Y+48, r25	; 0x30
    28e2:	8f a7       	std	Y+47, r24	; 0x2f
    28e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    28e6:	98 a9       	ldd	r25, Y+48	; 0x30
    28e8:	9c a7       	std	Y+44, r25	; 0x2c
    28ea:	8b a7       	std	Y+43, r24	; 0x2b
    28ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    28ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    28f0:	01 97       	sbiw	r24, 0x01	; 1
    28f2:	f1 f7       	brne	.-4      	; 0x28f0 <main+0x696>
    28f4:	9c a7       	std	Y+44, r25	; 0x2c
    28f6:	8b a7       	std	Y+43, r24	; 0x2b
							for(j=0;j<2;j++)
							{
								LCD_clearScreen();
								LCD_displayString("Plez Enter Pass");
								LCD_moveCursor(1,0);
								for(i=0;i<5;i++)
    28f8:	de 01       	movw	r26, r28
    28fa:	a5 5b       	subi	r26, 0xB5	; 181
    28fc:	bf 4f       	sbci	r27, 0xFF	; 255
    28fe:	fe 01       	movw	r30, r28
    2900:	e5 5b       	subi	r30, 0xB5	; 181
    2902:	ff 4f       	sbci	r31, 0xFF	; 255
    2904:	80 81       	ld	r24, Z
    2906:	8f 5f       	subi	r24, 0xFF	; 255
    2908:	8c 93       	st	X, r24
    290a:	fe 01       	movw	r30, r28
    290c:	e5 5b       	subi	r30, 0xB5	; 181
    290e:	ff 4f       	sbci	r31, 0xFF	; 255
    2910:	80 81       	ld	r24, Z
    2912:	85 30       	cpi	r24, 0x05	; 5
    2914:	08 f4       	brcc	.+2      	; 0x2918 <main+0x6be>
    2916:	6b cf       	rjmp	.-298    	; 0x27ee <main+0x594>
								{
									arr1[i]=KEYPAD_getPressedKey();
									LCD_displayCharacter('*');
									_delay_ms(500);
								}
								if(KEYPAD_getPressedKey()==13)
    2918:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <KEYPAD_getPressedKey>
    291c:	8d 30       	cpi	r24, 0x0D	; 13
    291e:	59 f4       	brne	.+22     	; 0x2936 <main+0x6dc>
								{
									UART_sendByte(MC1_READY);
    2920:	80 e1       	ldi	r24, 0x10	; 16
    2922:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
									UART_sendString(arr1);
    2926:	ce 01       	movw	r24, r28
    2928:	84 5b       	subi	r24, 0xB4	; 180
    292a:	9f 4f       	sbci	r25, 0xFF	; 255
    292c:	0e 94 4a 06 	call	0xc94	; 0xc94 <UART_sendString>
									UART_sendByte('+');
    2930:	8b e2       	ldi	r24, 0x2B	; 43
    2932:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
								}
								while(UART_recieveByte() != MC1_READY){}
    2936:	0e 94 3b 06 	call	0xc76	; 0xc76 <UART_recieveByte>
    293a:	80 31       	cpi	r24, 0x10	; 16
    293c:	e1 f7       	brne	.-8      	; 0x2936 <main+0x6dc>
								if(UART_recieveByte() == MATCHED)
    293e:	0e 94 3b 06 	call	0xc76	; 0xc76 <UART_recieveByte>
    2942:	8f 30       	cpi	r24, 0x0F	; 15
    2944:	09 f0       	breq	.+2      	; 0x2948 <main+0x6ee>
    2946:	3e c0       	rjmp	.+124    	; 0x29c4 <main+0x76a>
								{
									LCD_clearScreen();
    2948:	0e 94 ca 0c 	call	0x1994	; 0x1994 <LCD_clearScreen>
									LCD_displayString("Door is Unlocking");
    294c:	89 eb       	ldi	r24, 0xB9	; 185
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_displayString>
									Timer1_init(&Timer_Conf);
    2954:	ce 01       	movw	r24, r28
    2956:	86 5a       	subi	r24, 0xA6	; 166
    2958:	9f 4f       	sbci	r25, 0xFF	; 255
    295a:	0e 94 1c 07 	call	0xe38	; 0xe38 <Timer1_init>
									while(g_tick!=5){}
    295e:	80 91 0c 01 	lds	r24, 0x010C
    2962:	85 30       	cpi	r24, 0x05	; 5
    2964:	e1 f7       	brne	.-8      	; 0x295e <main+0x704>
									g_tick=0;
    2966:	10 92 0c 01 	sts	0x010C, r1
									LCD_clearScreen();
    296a:	0e 94 ca 0c 	call	0x1994	; 0x1994 <LCD_clearScreen>
									LCD_displayString("Door is open");
    296e:	8b ec       	ldi	r24, 0xCB	; 203
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_displayString>
									while(g_tick!=1){}
    2976:	80 91 0c 01 	lds	r24, 0x010C
    297a:	81 30       	cpi	r24, 0x01	; 1
    297c:	e1 f7       	brne	.-8      	; 0x2976 <main+0x71c>
									g_tick=0;
    297e:	10 92 0c 01 	sts	0x010C, r1
									LCD_clearScreen();
    2982:	0e 94 ca 0c 	call	0x1994	; 0x1994 <LCD_clearScreen>
									LCD_displayString("Door is locking");
    2986:	88 ed       	ldi	r24, 0xD8	; 216
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_displayString>
									while(g_tick!=5){}
    298e:	80 91 0c 01 	lds	r24, 0x010C
    2992:	85 30       	cpi	r24, 0x05	; 5
    2994:	e1 f7       	brne	.-8      	; 0x298e <main+0x734>
									g_tick=0;
    2996:	10 92 0c 01 	sts	0x010C, r1
									Timer1_deInit();
    299a:	0e 94 7c 07 	call	0xef8	; 0xef8 <Timer1_deInit>
									LCD_clearScreen();
    299e:	0e 94 ca 0c 	call	0x1994	; 0x1994 <LCD_clearScreen>
									LCD_displayString("Plz Enter Pass");
    29a2:	80 e6       	ldi	r24, 0x60	; 96
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_displayString>
									LCD_moveCursor(1,0);
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	60 e0       	ldi	r22, 0x00	; 0
    29ae:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_moveCursor>
									i=0;
    29b2:	fe 01       	movw	r30, r28
    29b4:	e5 5b       	subi	r30, 0xB5	; 181
    29b6:	ff 4f       	sbci	r31, 0xFF	; 255
    29b8:	10 82       	st	Z, r1
									Enter_flag =0;
    29ba:	fe 01       	movw	r30, r28
    29bc:	e9 5b       	subi	r30, 0xB9	; 185
    29be:	ff 4f       	sbci	r31, 0xFF	; 255
    29c0:	10 82       	st	Z, r1
    29c2:	10 c0       	rjmp	.+32     	; 0x29e4 <main+0x78a>

						}
						else
						{
							/* repeat the previous operations twice or until the user enter correct pass*/
							for(j=0;j<2;j++)
    29c4:	de 01       	movw	r26, r28
    29c6:	a6 5b       	subi	r26, 0xB6	; 182
    29c8:	bf 4f       	sbci	r27, 0xFF	; 255
    29ca:	fe 01       	movw	r30, r28
    29cc:	e6 5b       	subi	r30, 0xB6	; 182
    29ce:	ff 4f       	sbci	r31, 0xFF	; 255
    29d0:	80 81       	ld	r24, Z
    29d2:	8f 5f       	subi	r24, 0xFF	; 255
    29d4:	8c 93       	st	X, r24
    29d6:	fe 01       	movw	r30, r28
    29d8:	e6 5b       	subi	r30, 0xB6	; 182
    29da:	ff 4f       	sbci	r31, 0xFF	; 255
    29dc:	80 81       	ld	r24, Z
    29de:	82 30       	cpi	r24, 0x02	; 2
    29e0:	08 f4       	brcc	.+2      	; 0x29e4 <main+0x78a>
    29e2:	f6 ce       	rjmp	.-532    	; 0x27d0 <main+0x576>
									Enter_flag =0;
									break;
								}

							}
							while(UART_recieveByte() != MC1_READY){}
    29e4:	0e 94 3b 06 	call	0xc76	; 0xc76 <UART_recieveByte>
    29e8:	80 31       	cpi	r24, 0x10	; 16
    29ea:	e1 f7       	brne	.-8      	; 0x29e4 <main+0x78a>
							/* if the pass unmatched 3 times do the following code*/
							if(UART_recieveByte() == UNMATCHED)
    29ec:	0e 94 3b 06 	call	0xc76	; 0xc76 <UART_recieveByte>
    29f0:	8f 3f       	cpi	r24, 0xFF	; 255
    29f2:	09 f0       	breq	.+2      	; 0x29f6 <main+0x79c>
    29f4:	04 c2       	rjmp	.+1032   	; 0x2dfe <main+0xba4>
							{LCD_clearScreen();
    29f6:	0e 94 ca 0c 	call	0x1994	; 0x1994 <LCD_clearScreen>
							LCD_displayString("WRONG PASS!"); /* display Wrong pass on LCD*/
    29fa:	88 ee       	ldi	r24, 0xE8	; 232
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_displayString>
							Timer1_init(&Timer_Conf);/* Initialize timer 1*/
    2a02:	ce 01       	movw	r24, r28
    2a04:	86 5a       	subi	r24, 0xA6	; 166
    2a06:	9f 4f       	sbci	r25, 0xFF	; 255
    2a08:	0e 94 1c 07 	call	0xe38	; 0xe38 <Timer1_init>
							while(g_tick!=20){}/* wait until the g_tick increment to 20 (20*3=60SEC=1minute)*/
    2a0c:	80 91 0c 01 	lds	r24, 0x010C
    2a10:	84 31       	cpi	r24, 0x14	; 20
    2a12:	e1 f7       	brne	.-8      	; 0x2a0c <main+0x7b2>
							g_tick=0;/* clear the g_tick for next time*/
    2a14:	10 92 0c 01 	sts	0x010C, r1
							Timer1_deInit();/* deinit timer 1*/
    2a18:	0e 94 7c 07 	call	0xef8	; 0xef8 <Timer1_deInit>
							Enter_flag = 3; /* store 3 in Enter_flag to repeat menu operations*/
    2a1c:	fe 01       	movw	r30, r28
    2a1e:	e9 5b       	subi	r30, 0xB9	; 185
    2a20:	ff 4f       	sbci	r31, 0xFF	; 255
    2a22:	83 e0       	ldi	r24, 0x03	; 3
    2a24:	80 83       	st	Z, r24
    2a26:	eb c1       	rjmp	.+982    	; 0x2dfe <main+0xba4>

						}
					}

				}
				else if(menu == '-')
    2a28:	fe 01       	movw	r30, r28
    2a2a:	e8 5b       	subi	r30, 0xB8	; 184
    2a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2e:	80 81       	ld	r24, Z
    2a30:	8d 32       	cpi	r24, 0x2D	; 45
    2a32:	09 f0       	breq	.+2      	; 0x2a36 <main+0x7dc>
    2a34:	e4 c1       	rjmp	.+968    	; 0x2dfe <main+0xba4>
				{
					/* display enter pass on LCD*/
					LCD_clearScreen();
    2a36:	0e 94 ca 0c 	call	0x1994	; 0x1994 <LCD_clearScreen>
					LCD_displayString("Plez Enter Pass");
    2a3a:	89 ea       	ldi	r24, 0xA9	; 169
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_displayString>
					LCD_moveCursor(1,0);
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	60 e0       	ldi	r22, 0x00	; 0
    2a46:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_moveCursor>
					/* for loop to take the pass entered by user and store it on array1*/
					for(i=0;i<5;i++)
    2a4a:	fe 01       	movw	r30, r28
    2a4c:	e5 5b       	subi	r30, 0xB5	; 181
    2a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a50:	10 82       	st	Z, r1
    2a52:	8e c0       	rjmp	.+284    	; 0x2b70 <main+0x916>
					{
						arr1[i]=KEYPAD_getPressedKey();
    2a54:	fe 01       	movw	r30, r28
    2a56:	e5 5b       	subi	r30, 0xB5	; 181
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	80 81       	ld	r24, Z
    2a5c:	08 2f       	mov	r16, r24
    2a5e:	10 e0       	ldi	r17, 0x00	; 0
    2a60:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <KEYPAD_getPressedKey>
    2a64:	28 2f       	mov	r18, r24
    2a66:	ce 01       	movw	r24, r28
    2a68:	84 5b       	subi	r24, 0xB4	; 180
    2a6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a6c:	fc 01       	movw	r30, r24
    2a6e:	e0 0f       	add	r30, r16
    2a70:	f1 1f       	adc	r31, r17
    2a72:	20 83       	st	Z, r18
						LCD_displayCharacter('*');
    2a74:	8a e2       	ldi	r24, 0x2A	; 42
    2a76:	0e 94 34 0a 	call	0x1468	; 0x1468 <LCD_displayCharacter>
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	aa ef       	ldi	r26, 0xFA	; 250
    2a80:	b3 e4       	ldi	r27, 0x43	; 67
    2a82:	8f a3       	std	Y+39, r24	; 0x27
    2a84:	98 a7       	std	Y+40, r25	; 0x28
    2a86:	a9 a7       	std	Y+41, r26	; 0x29
    2a88:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a8a:	6f a1       	ldd	r22, Y+39	; 0x27
    2a8c:	78 a5       	ldd	r23, Y+40	; 0x28
    2a8e:	89 a5       	ldd	r24, Y+41	; 0x29
    2a90:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	4a e7       	ldi	r20, 0x7A	; 122
    2a98:	53 e4       	ldi	r21, 0x43	; 67
    2a9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	8b a3       	std	Y+35, r24	; 0x23
    2aa4:	9c a3       	std	Y+36, r25	; 0x24
    2aa6:	ad a3       	std	Y+37, r26	; 0x25
    2aa8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2aaa:	6b a1       	ldd	r22, Y+35	; 0x23
    2aac:	7c a1       	ldd	r23, Y+36	; 0x24
    2aae:	8d a1       	ldd	r24, Y+37	; 0x25
    2ab0:	9e a1       	ldd	r25, Y+38	; 0x26
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	40 e8       	ldi	r20, 0x80	; 128
    2ab8:	5f e3       	ldi	r21, 0x3F	; 63
    2aba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2abe:	88 23       	and	r24, r24
    2ac0:	2c f4       	brge	.+10     	; 0x2acc <main+0x872>
		__ticks = 1;
    2ac2:	81 e0       	ldi	r24, 0x01	; 1
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	9a a3       	std	Y+34, r25	; 0x22
    2ac8:	89 a3       	std	Y+33, r24	; 0x21
    2aca:	3f c0       	rjmp	.+126    	; 0x2b4a <main+0x8f0>
	else if (__tmp > 65535)
    2acc:	6b a1       	ldd	r22, Y+35	; 0x23
    2ace:	7c a1       	ldd	r23, Y+36	; 0x24
    2ad0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ad2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	3f ef       	ldi	r19, 0xFF	; 255
    2ad8:	4f e7       	ldi	r20, 0x7F	; 127
    2ada:	57 e4       	ldi	r21, 0x47	; 71
    2adc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ae0:	18 16       	cp	r1, r24
    2ae2:	4c f5       	brge	.+82     	; 0x2b36 <main+0x8dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ae6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ae8:	89 a5       	ldd	r24, Y+41	; 0x29
    2aea:	9a a5       	ldd	r25, Y+42	; 0x2a
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	40 e2       	ldi	r20, 0x20	; 32
    2af2:	51 e4       	ldi	r21, 0x41	; 65
    2af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	bc 01       	movw	r22, r24
    2afe:	cd 01       	movw	r24, r26
    2b00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	9a a3       	std	Y+34, r25	; 0x22
    2b0a:	89 a3       	std	Y+33, r24	; 0x21
    2b0c:	0f c0       	rjmp	.+30     	; 0x2b2c <main+0x8d2>
    2b0e:	89 e1       	ldi	r24, 0x19	; 25
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	98 a3       	std	Y+32, r25	; 0x20
    2b14:	8f 8f       	std	Y+31, r24	; 0x1f
    2b16:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b18:	98 a1       	ldd	r25, Y+32	; 0x20
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	f1 f7       	brne	.-4      	; 0x2b1a <main+0x8c0>
    2b1e:	98 a3       	std	Y+32, r25	; 0x20
    2b20:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b22:	89 a1       	ldd	r24, Y+33	; 0x21
    2b24:	9a a1       	ldd	r25, Y+34	; 0x22
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	9a a3       	std	Y+34, r25	; 0x22
    2b2a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b2c:	89 a1       	ldd	r24, Y+33	; 0x21
    2b2e:	9a a1       	ldd	r25, Y+34	; 0x22
    2b30:	00 97       	sbiw	r24, 0x00	; 0
    2b32:	69 f7       	brne	.-38     	; 0x2b0e <main+0x8b4>
    2b34:	14 c0       	rjmp	.+40     	; 0x2b5e <main+0x904>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b36:	6b a1       	ldd	r22, Y+35	; 0x23
    2b38:	7c a1       	ldd	r23, Y+36	; 0x24
    2b3a:	8d a1       	ldd	r24, Y+37	; 0x25
    2b3c:	9e a1       	ldd	r25, Y+38	; 0x26
    2b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	9a a3       	std	Y+34, r25	; 0x22
    2b48:	89 a3       	std	Y+33, r24	; 0x21
    2b4a:	89 a1       	ldd	r24, Y+33	; 0x21
    2b4c:	9a a1       	ldd	r25, Y+34	; 0x22
    2b4e:	9e 8f       	std	Y+30, r25	; 0x1e
    2b50:	8d 8f       	std	Y+29, r24	; 0x1d
    2b52:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b54:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b56:	01 97       	sbiw	r24, 0x01	; 1
    2b58:	f1 f7       	brne	.-4      	; 0x2b56 <main+0x8fc>
    2b5a:	9e 8f       	std	Y+30, r25	; 0x1e
    2b5c:	8d 8f       	std	Y+29, r24	; 0x1d
					/* display enter pass on LCD*/
					LCD_clearScreen();
					LCD_displayString("Plez Enter Pass");
					LCD_moveCursor(1,0);
					/* for loop to take the pass entered by user and store it on array1*/
					for(i=0;i<5;i++)
    2b5e:	de 01       	movw	r26, r28
    2b60:	a5 5b       	subi	r26, 0xB5	; 181
    2b62:	bf 4f       	sbci	r27, 0xFF	; 255
    2b64:	fe 01       	movw	r30, r28
    2b66:	e5 5b       	subi	r30, 0xB5	; 181
    2b68:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6a:	80 81       	ld	r24, Z
    2b6c:	8f 5f       	subi	r24, 0xFF	; 255
    2b6e:	8c 93       	st	X, r24
    2b70:	fe 01       	movw	r30, r28
    2b72:	e5 5b       	subi	r30, 0xB5	; 181
    2b74:	ff 4f       	sbci	r31, 0xFF	; 255
    2b76:	80 81       	ld	r24, Z
    2b78:	85 30       	cpi	r24, 0x05	; 5
    2b7a:	08 f4       	brcc	.+2      	; 0x2b7e <main+0x924>
    2b7c:	6b cf       	rjmp	.-298    	; 0x2a54 <main+0x7fa>
						arr1[i]=KEYPAD_getPressedKey();
						LCD_displayCharacter('*');
						/* wait half sec to avoid high running operations while pressing the keypad buttons*/
						_delay_ms(500);
					}
					if(KEYPAD_getPressedKey() ==13) /* when enter is pressed*/
    2b7e:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <KEYPAD_getPressedKey>
    2b82:	8d 30       	cpi	r24, 0x0D	; 13
    2b84:	59 f4       	brne	.+22     	; 0x2b9c <main+0x942>
					{
						UART_sendByte(MC1_READY);/* send MC1_READY to the control ECU to notice him i'm start sending*/
    2b86:	80 e1       	ldi	r24, 0x10	; 16
    2b88:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
						UART_sendString(arr1);/* send taken pass*/
    2b8c:	ce 01       	movw	r24, r28
    2b8e:	84 5b       	subi	r24, 0xB4	; 180
    2b90:	9f 4f       	sbci	r25, 0xFF	; 255
    2b92:	0e 94 4a 06 	call	0xc94	; 0xc94 <UART_sendString>
						UART_sendByte('-');/* send the running operation symbol*/
    2b96:	8d e2       	ldi	r24, 0x2D	; 45
    2b98:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
					}
					while(UART_recieveByte() != MC1_READY){}
    2b9c:	0e 94 3b 06 	call	0xc76	; 0xc76 <UART_recieveByte>
    2ba0:	80 31       	cpi	r24, 0x10	; 16
    2ba2:	e1 f7       	brne	.-8      	; 0x2b9c <main+0x942>

					if(UART_recieveByte() == MATCHED)/* if the sent pass matched with pass stored in EEPROM do the following*/
    2ba4:	0e 94 3b 06 	call	0xc76	; 0xc76 <UART_recieveByte>
    2ba8:	8f 30       	cpi	r24, 0x0F	; 15
    2baa:	99 f4       	brne	.+38     	; 0x2bd2 <main+0x978>
					{
						/* clear screen and repeat the step 1 again*/
						LCD_clearScreen();
    2bac:	0e 94 ca 0c 	call	0x1994	; 0x1994 <LCD_clearScreen>
						LCD_displayString("Plz Enter Pass");
    2bb0:	80 e6       	ldi	r24, 0x60	; 96
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_displayString>
						LCD_moveCursor(1,0);
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	60 e0       	ldi	r22, 0x00	; 0
    2bbc:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_moveCursor>
						i=0;
    2bc0:	fe 01       	movw	r30, r28
    2bc2:	e5 5b       	subi	r30, 0xB5	; 181
    2bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc6:	10 82       	st	Z, r1
						Enter_flag =0;
    2bc8:	fe 01       	movw	r30, r28
    2bca:	e9 5b       	subi	r30, 0xB9	; 185
    2bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bce:	10 82       	st	Z, r1
    2bd0:	16 c1       	rjmp	.+556    	; 0x2dfe <main+0xba4>
					}
					else
					{
						/* repeat the previous operations twice or until the user enter correct pass*/
						for(j=0;j<2;j++)
    2bd2:	fe 01       	movw	r30, r28
    2bd4:	e6 5b       	subi	r30, 0xB6	; 182
    2bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd8:	10 82       	st	Z, r1
    2bda:	d7 c0       	rjmp	.+430    	; 0x2d8a <main+0xb30>
						{
							LCD_clearScreen();
    2bdc:	0e 94 ca 0c 	call	0x1994	; 0x1994 <LCD_clearScreen>
							LCD_displayString("Plez Enter Pass");
    2be0:	89 ea       	ldi	r24, 0xA9	; 169
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_displayString>
							LCD_moveCursor(1,0);
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	60 e0       	ldi	r22, 0x00	; 0
    2bec:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_moveCursor>
							for(i=0;i<5;i++)
    2bf0:	fe 01       	movw	r30, r28
    2bf2:	e5 5b       	subi	r30, 0xB5	; 181
    2bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf6:	10 82       	st	Z, r1
    2bf8:	8e c0       	rjmp	.+284    	; 0x2d16 <main+0xabc>
							{
								arr1[i]=KEYPAD_getPressedKey();
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	e5 5b       	subi	r30, 0xB5	; 181
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	80 81       	ld	r24, Z
    2c02:	08 2f       	mov	r16, r24
    2c04:	10 e0       	ldi	r17, 0x00	; 0
    2c06:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <KEYPAD_getPressedKey>
    2c0a:	28 2f       	mov	r18, r24
    2c0c:	ce 01       	movw	r24, r28
    2c0e:	84 5b       	subi	r24, 0xB4	; 180
    2c10:	9f 4f       	sbci	r25, 0xFF	; 255
    2c12:	fc 01       	movw	r30, r24
    2c14:	e0 0f       	add	r30, r16
    2c16:	f1 1f       	adc	r31, r17
    2c18:	20 83       	st	Z, r18
								LCD_displayCharacter('*');
    2c1a:	8a e2       	ldi	r24, 0x2A	; 42
    2c1c:	0e 94 34 0a 	call	0x1468	; 0x1468 <LCD_displayCharacter>
    2c20:	80 e0       	ldi	r24, 0x00	; 0
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	aa ef       	ldi	r26, 0xFA	; 250
    2c26:	b3 e4       	ldi	r27, 0x43	; 67
    2c28:	89 8f       	std	Y+25, r24	; 0x19
    2c2a:	9a 8f       	std	Y+26, r25	; 0x1a
    2c2c:	ab 8f       	std	Y+27, r26	; 0x1b
    2c2e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c30:	69 8d       	ldd	r22, Y+25	; 0x19
    2c32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	4a e7       	ldi	r20, 0x7A	; 122
    2c3e:	53 e4       	ldi	r21, 0x43	; 67
    2c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	8d 8b       	std	Y+21, r24	; 0x15
    2c4a:	9e 8b       	std	Y+22, r25	; 0x16
    2c4c:	af 8b       	std	Y+23, r26	; 0x17
    2c4e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c50:	6d 89       	ldd	r22, Y+21	; 0x15
    2c52:	7e 89       	ldd	r23, Y+22	; 0x16
    2c54:	8f 89       	ldd	r24, Y+23	; 0x17
    2c56:	98 8d       	ldd	r25, Y+24	; 0x18
    2c58:	20 e0       	ldi	r18, 0x00	; 0
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	40 e8       	ldi	r20, 0x80	; 128
    2c5e:	5f e3       	ldi	r21, 0x3F	; 63
    2c60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c64:	88 23       	and	r24, r24
    2c66:	2c f4       	brge	.+10     	; 0x2c72 <main+0xa18>
		__ticks = 1;
    2c68:	81 e0       	ldi	r24, 0x01	; 1
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	9c 8b       	std	Y+20, r25	; 0x14
    2c6e:	8b 8b       	std	Y+19, r24	; 0x13
    2c70:	3f c0       	rjmp	.+126    	; 0x2cf0 <main+0xa96>
	else if (__tmp > 65535)
    2c72:	6d 89       	ldd	r22, Y+21	; 0x15
    2c74:	7e 89       	ldd	r23, Y+22	; 0x16
    2c76:	8f 89       	ldd	r24, Y+23	; 0x17
    2c78:	98 8d       	ldd	r25, Y+24	; 0x18
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	3f ef       	ldi	r19, 0xFF	; 255
    2c7e:	4f e7       	ldi	r20, 0x7F	; 127
    2c80:	57 e4       	ldi	r21, 0x47	; 71
    2c82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c86:	18 16       	cp	r1, r24
    2c88:	4c f5       	brge	.+82     	; 0x2cdc <main+0xa82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c8a:	69 8d       	ldd	r22, Y+25	; 0x19
    2c8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	40 e2       	ldi	r20, 0x20	; 32
    2c98:	51 e4       	ldi	r21, 0x41	; 65
    2c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	bc 01       	movw	r22, r24
    2ca4:	cd 01       	movw	r24, r26
    2ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2caa:	dc 01       	movw	r26, r24
    2cac:	cb 01       	movw	r24, r22
    2cae:	9c 8b       	std	Y+20, r25	; 0x14
    2cb0:	8b 8b       	std	Y+19, r24	; 0x13
    2cb2:	0f c0       	rjmp	.+30     	; 0x2cd2 <main+0xa78>
    2cb4:	89 e1       	ldi	r24, 0x19	; 25
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	9a 8b       	std	Y+18, r25	; 0x12
    2cba:	89 8b       	std	Y+17, r24	; 0x11
    2cbc:	89 89       	ldd	r24, Y+17	; 0x11
    2cbe:	9a 89       	ldd	r25, Y+18	; 0x12
    2cc0:	01 97       	sbiw	r24, 0x01	; 1
    2cc2:	f1 f7       	brne	.-4      	; 0x2cc0 <main+0xa66>
    2cc4:	9a 8b       	std	Y+18, r25	; 0x12
    2cc6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cc8:	8b 89       	ldd	r24, Y+19	; 0x13
    2cca:	9c 89       	ldd	r25, Y+20	; 0x14
    2ccc:	01 97       	sbiw	r24, 0x01	; 1
    2cce:	9c 8b       	std	Y+20, r25	; 0x14
    2cd0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd2:	8b 89       	ldd	r24, Y+19	; 0x13
    2cd4:	9c 89       	ldd	r25, Y+20	; 0x14
    2cd6:	00 97       	sbiw	r24, 0x00	; 0
    2cd8:	69 f7       	brne	.-38     	; 0x2cb4 <main+0xa5a>
    2cda:	14 c0       	rjmp	.+40     	; 0x2d04 <main+0xaaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cdc:	6d 89       	ldd	r22, Y+21	; 0x15
    2cde:	7e 89       	ldd	r23, Y+22	; 0x16
    2ce0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ce2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce8:	dc 01       	movw	r26, r24
    2cea:	cb 01       	movw	r24, r22
    2cec:	9c 8b       	std	Y+20, r25	; 0x14
    2cee:	8b 8b       	std	Y+19, r24	; 0x13
    2cf0:	8b 89       	ldd	r24, Y+19	; 0x13
    2cf2:	9c 89       	ldd	r25, Y+20	; 0x14
    2cf4:	98 8b       	std	Y+16, r25	; 0x10
    2cf6:	8f 87       	std	Y+15, r24	; 0x0f
    2cf8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cfa:	98 89       	ldd	r25, Y+16	; 0x10
    2cfc:	01 97       	sbiw	r24, 0x01	; 1
    2cfe:	f1 f7       	brne	.-4      	; 0x2cfc <main+0xaa2>
    2d00:	98 8b       	std	Y+16, r25	; 0x10
    2d02:	8f 87       	std	Y+15, r24	; 0x0f
						for(j=0;j<2;j++)
						{
							LCD_clearScreen();
							LCD_displayString("Plez Enter Pass");
							LCD_moveCursor(1,0);
							for(i=0;i<5;i++)
    2d04:	de 01       	movw	r26, r28
    2d06:	a5 5b       	subi	r26, 0xB5	; 181
    2d08:	bf 4f       	sbci	r27, 0xFF	; 255
    2d0a:	fe 01       	movw	r30, r28
    2d0c:	e5 5b       	subi	r30, 0xB5	; 181
    2d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d10:	80 81       	ld	r24, Z
    2d12:	8f 5f       	subi	r24, 0xFF	; 255
    2d14:	8c 93       	st	X, r24
    2d16:	fe 01       	movw	r30, r28
    2d18:	e5 5b       	subi	r30, 0xB5	; 181
    2d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1c:	80 81       	ld	r24, Z
    2d1e:	85 30       	cpi	r24, 0x05	; 5
    2d20:	08 f4       	brcc	.+2      	; 0x2d24 <main+0xaca>
    2d22:	6b cf       	rjmp	.-298    	; 0x2bfa <main+0x9a0>
							{
								arr1[i]=KEYPAD_getPressedKey();
								LCD_displayCharacter('*');
								_delay_ms(500);
							}
							if(KEYPAD_getPressedKey() ==13)
    2d24:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <KEYPAD_getPressedKey>
    2d28:	8d 30       	cpi	r24, 0x0D	; 13
    2d2a:	59 f4       	brne	.+22     	; 0x2d42 <main+0xae8>
							{
								UART_sendByte(MC1_READY);
    2d2c:	80 e1       	ldi	r24, 0x10	; 16
    2d2e:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
								UART_sendString(arr1);
    2d32:	ce 01       	movw	r24, r28
    2d34:	84 5b       	subi	r24, 0xB4	; 180
    2d36:	9f 4f       	sbci	r25, 0xFF	; 255
    2d38:	0e 94 4a 06 	call	0xc94	; 0xc94 <UART_sendString>
								UART_sendByte('-');
    2d3c:	8d e2       	ldi	r24, 0x2D	; 45
    2d3e:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
							}
							while(UART_recieveByte() != MC1_READY){}
    2d42:	0e 94 3b 06 	call	0xc76	; 0xc76 <UART_recieveByte>
    2d46:	80 31       	cpi	r24, 0x10	; 16
    2d48:	e1 f7       	brne	.-8      	; 0x2d42 <main+0xae8>
							if(UART_recieveByte() == MATCHED)
    2d4a:	0e 94 3b 06 	call	0xc76	; 0xc76 <UART_recieveByte>
    2d4e:	8f 30       	cpi	r24, 0x0F	; 15
    2d50:	99 f4       	brne	.+38     	; 0x2d78 <main+0xb1e>
							{LCD_clearScreen();
    2d52:	0e 94 ca 0c 	call	0x1994	; 0x1994 <LCD_clearScreen>
							LCD_displayString("Plz Enter Pass");
    2d56:	80 e6       	ldi	r24, 0x60	; 96
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_displayString>
							LCD_moveCursor(1,0);
    2d5e:	81 e0       	ldi	r24, 0x01	; 1
    2d60:	60 e0       	ldi	r22, 0x00	; 0
    2d62:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_moveCursor>
							i=0;
    2d66:	fe 01       	movw	r30, r28
    2d68:	e5 5b       	subi	r30, 0xB5	; 181
    2d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6c:	10 82       	st	Z, r1
							Enter_flag =0;
    2d6e:	fe 01       	movw	r30, r28
    2d70:	e9 5b       	subi	r30, 0xB9	; 185
    2d72:	ff 4f       	sbci	r31, 0xFF	; 255
    2d74:	10 82       	st	Z, r1
    2d76:	10 c0       	rjmp	.+32     	; 0x2d98 <main+0xb3e>
						Enter_flag =0;
					}
					else
					{
						/* repeat the previous operations twice or until the user enter correct pass*/
						for(j=0;j<2;j++)
    2d78:	de 01       	movw	r26, r28
    2d7a:	a6 5b       	subi	r26, 0xB6	; 182
    2d7c:	bf 4f       	sbci	r27, 0xFF	; 255
    2d7e:	fe 01       	movw	r30, r28
    2d80:	e6 5b       	subi	r30, 0xB6	; 182
    2d82:	ff 4f       	sbci	r31, 0xFF	; 255
    2d84:	80 81       	ld	r24, Z
    2d86:	8f 5f       	subi	r24, 0xFF	; 255
    2d88:	8c 93       	st	X, r24
    2d8a:	fe 01       	movw	r30, r28
    2d8c:	e6 5b       	subi	r30, 0xB6	; 182
    2d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d90:	80 81       	ld	r24, Z
    2d92:	82 30       	cpi	r24, 0x02	; 2
    2d94:	08 f4       	brcc	.+2      	; 0x2d98 <main+0xb3e>
    2d96:	22 cf       	rjmp	.-444    	; 0x2bdc <main+0x982>
							Enter_flag =0;
							break;
							}

						}
						while(UART_recieveByte() != MC1_READY){}
    2d98:	0e 94 3b 06 	call	0xc76	; 0xc76 <UART_recieveByte>
    2d9c:	80 31       	cpi	r24, 0x10	; 16
    2d9e:	e1 f7       	brne	.-8      	; 0x2d98 <main+0xb3e>
						if(UART_recieveByte() == UNMATCHED)/* if the pass unmatched 3 times do the following code*/
    2da0:	0e 94 3b 06 	call	0xc76	; 0xc76 <UART_recieveByte>
    2da4:	8f 3f       	cpi	r24, 0xFF	; 255
    2da6:	59 f5       	brne	.+86     	; 0x2dfe <main+0xba4>
						{LCD_clearScreen();
    2da8:	0e 94 ca 0c 	call	0x1994	; 0x1994 <LCD_clearScreen>
						LCD_displayString("WRONG PASS!");
    2dac:	88 ee       	ldi	r24, 0xE8	; 232
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_displayString>
						Timer1_init(&Timer_Conf);
    2db4:	ce 01       	movw	r24, r28
    2db6:	86 5a       	subi	r24, 0xA6	; 166
    2db8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dba:	0e 94 1c 07 	call	0xe38	; 0xe38 <Timer1_init>
						while(g_tick!=20){}
    2dbe:	80 91 0c 01 	lds	r24, 0x010C
    2dc2:	84 31       	cpi	r24, 0x14	; 20
    2dc4:	e1 f7       	brne	.-8      	; 0x2dbe <main+0xb64>
						g_tick=0;
    2dc6:	10 92 0c 01 	sts	0x010C, r1
						Timer1_deInit();
    2dca:	0e 94 7c 07 	call	0xef8	; 0xef8 <Timer1_deInit>
						Enter_flag = 3;
    2dce:	fe 01       	movw	r30, r28
    2dd0:	e9 5b       	subi	r30, 0xB9	; 185
    2dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd4:	83 e0       	ldi	r24, 0x03	; 3
    2dd6:	80 83       	st	Z, r24
    2dd8:	12 c0       	rjmp	.+36     	; 0x2dfe <main+0xba4>
				}
			}
			else
			{
				/* when the passes are unmatched in the first step do the following*/
				LCD_clearScreen();
    2dda:	0e 94 ca 0c 	call	0x1994	; 0x1994 <LCD_clearScreen>
				LCD_displayString("Plz Enter Pass");
    2dde:	80 e6       	ldi	r24, 0x60	; 96
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_displayString>
				LCD_moveCursor(1,0);
    2de6:	81 e0       	ldi	r24, 0x01	; 1
    2de8:	60 e0       	ldi	r22, 0x00	; 0
    2dea:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_moveCursor>
				i=0;
    2dee:	fe 01       	movw	r30, r28
    2df0:	e5 5b       	subi	r30, 0xB5	; 181
    2df2:	ff 4f       	sbci	r31, 0xFF	; 255
    2df4:	10 82       	st	Z, r1
				Enter_flag =0;
    2df6:	fe 01       	movw	r30, r28
    2df8:	e9 5b       	subi	r30, 0xB9	; 185
    2dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfc:	10 82       	st	Z, r1
    2dfe:	80 e0       	ldi	r24, 0x00	; 0
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	aa ef       	ldi	r26, 0xFA	; 250
    2e04:	b3 e4       	ldi	r27, 0x43	; 67
    2e06:	8b 87       	std	Y+11, r24	; 0x0b
    2e08:	9c 87       	std	Y+12, r25	; 0x0c
    2e0a:	ad 87       	std	Y+13, r26	; 0x0d
    2e0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e10:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e12:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e14:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e16:	20 e0       	ldi	r18, 0x00	; 0
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	4a e7       	ldi	r20, 0x7A	; 122
    2e1c:	53 e4       	ldi	r21, 0x43	; 67
    2e1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e22:	dc 01       	movw	r26, r24
    2e24:	cb 01       	movw	r24, r22
    2e26:	8f 83       	std	Y+7, r24	; 0x07
    2e28:	98 87       	std	Y+8, r25	; 0x08
    2e2a:	a9 87       	std	Y+9, r26	; 0x09
    2e2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e2e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e30:	78 85       	ldd	r23, Y+8	; 0x08
    2e32:	89 85       	ldd	r24, Y+9	; 0x09
    2e34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	40 e8       	ldi	r20, 0x80	; 128
    2e3c:	5f e3       	ldi	r21, 0x3F	; 63
    2e3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e42:	88 23       	and	r24, r24
    2e44:	2c f4       	brge	.+10     	; 0x2e50 <main+0xbf6>
		__ticks = 1;
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	9e 83       	std	Y+6, r25	; 0x06
    2e4c:	8d 83       	std	Y+5, r24	; 0x05
    2e4e:	3f c0       	rjmp	.+126    	; 0x2ece <main+0xc74>
	else if (__tmp > 65535)
    2e50:	6f 81       	ldd	r22, Y+7	; 0x07
    2e52:	78 85       	ldd	r23, Y+8	; 0x08
    2e54:	89 85       	ldd	r24, Y+9	; 0x09
    2e56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e58:	20 e0       	ldi	r18, 0x00	; 0
    2e5a:	3f ef       	ldi	r19, 0xFF	; 255
    2e5c:	4f e7       	ldi	r20, 0x7F	; 127
    2e5e:	57 e4       	ldi	r21, 0x47	; 71
    2e60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e64:	18 16       	cp	r1, r24
    2e66:	4c f5       	brge	.+82     	; 0x2eba <main+0xc60>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e68:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	40 e2       	ldi	r20, 0x20	; 32
    2e76:	51 e4       	ldi	r21, 0x41	; 65
    2e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e7c:	dc 01       	movw	r26, r24
    2e7e:	cb 01       	movw	r24, r22
    2e80:	bc 01       	movw	r22, r24
    2e82:	cd 01       	movw	r24, r26
    2e84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e88:	dc 01       	movw	r26, r24
    2e8a:	cb 01       	movw	r24, r22
    2e8c:	9e 83       	std	Y+6, r25	; 0x06
    2e8e:	8d 83       	std	Y+5, r24	; 0x05
    2e90:	0f c0       	rjmp	.+30     	; 0x2eb0 <main+0xc56>
    2e92:	89 e1       	ldi	r24, 0x19	; 25
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	9c 83       	std	Y+4, r25	; 0x04
    2e98:	8b 83       	std	Y+3, r24	; 0x03
    2e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e9e:	01 97       	sbiw	r24, 0x01	; 1
    2ea0:	f1 f7       	brne	.-4      	; 0x2e9e <main+0xc44>
    2ea2:	9c 83       	std	Y+4, r25	; 0x04
    2ea4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eaa:	01 97       	sbiw	r24, 0x01	; 1
    2eac:	9e 83       	std	Y+6, r25	; 0x06
    2eae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb2:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb4:	00 97       	sbiw	r24, 0x00	; 0
    2eb6:	69 f7       	brne	.-38     	; 0x2e92 <main+0xc38>
    2eb8:	8f ca       	rjmp	.-2786   	; 0x23d8 <main+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eba:	6f 81       	ldd	r22, Y+7	; 0x07
    2ebc:	78 85       	ldd	r23, Y+8	; 0x08
    2ebe:	89 85       	ldd	r24, Y+9	; 0x09
    2ec0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	9e 83       	std	Y+6, r25	; 0x06
    2ecc:	8d 83       	std	Y+5, r24	; 0x05
    2ece:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed2:	9a 83       	std	Y+2, r25	; 0x02
    2ed4:	89 83       	std	Y+1, r24	; 0x01
    2ed6:	89 81       	ldd	r24, Y+1	; 0x01
    2ed8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eda:	01 97       	sbiw	r24, 0x01	; 1
    2edc:	f1 f7       	brne	.-4      	; 0x2eda <main+0xc80>
    2ede:	9a 83       	std	Y+2, r25	; 0x02
    2ee0:	89 83       	std	Y+1, r24	; 0x01
    2ee2:	7a ca       	rjmp	.-2828   	; 0x23d8 <main+0x17e>

00002ee4 <__udivmodsi4>:
    2ee4:	a1 e2       	ldi	r26, 0x21	; 33
    2ee6:	1a 2e       	mov	r1, r26
    2ee8:	aa 1b       	sub	r26, r26
    2eea:	bb 1b       	sub	r27, r27
    2eec:	fd 01       	movw	r30, r26
    2eee:	0d c0       	rjmp	.+26     	; 0x2f0a <__udivmodsi4_ep>

00002ef0 <__udivmodsi4_loop>:
    2ef0:	aa 1f       	adc	r26, r26
    2ef2:	bb 1f       	adc	r27, r27
    2ef4:	ee 1f       	adc	r30, r30
    2ef6:	ff 1f       	adc	r31, r31
    2ef8:	a2 17       	cp	r26, r18
    2efa:	b3 07       	cpc	r27, r19
    2efc:	e4 07       	cpc	r30, r20
    2efe:	f5 07       	cpc	r31, r21
    2f00:	20 f0       	brcs	.+8      	; 0x2f0a <__udivmodsi4_ep>
    2f02:	a2 1b       	sub	r26, r18
    2f04:	b3 0b       	sbc	r27, r19
    2f06:	e4 0b       	sbc	r30, r20
    2f08:	f5 0b       	sbc	r31, r21

00002f0a <__udivmodsi4_ep>:
    2f0a:	66 1f       	adc	r22, r22
    2f0c:	77 1f       	adc	r23, r23
    2f0e:	88 1f       	adc	r24, r24
    2f10:	99 1f       	adc	r25, r25
    2f12:	1a 94       	dec	r1
    2f14:	69 f7       	brne	.-38     	; 0x2ef0 <__udivmodsi4_loop>
    2f16:	60 95       	com	r22
    2f18:	70 95       	com	r23
    2f1a:	80 95       	com	r24
    2f1c:	90 95       	com	r25
    2f1e:	9b 01       	movw	r18, r22
    2f20:	ac 01       	movw	r20, r24
    2f22:	bd 01       	movw	r22, r26
    2f24:	cf 01       	movw	r24, r30
    2f26:	08 95       	ret

00002f28 <__prologue_saves__>:
    2f28:	2f 92       	push	r2
    2f2a:	3f 92       	push	r3
    2f2c:	4f 92       	push	r4
    2f2e:	5f 92       	push	r5
    2f30:	6f 92       	push	r6
    2f32:	7f 92       	push	r7
    2f34:	8f 92       	push	r8
    2f36:	9f 92       	push	r9
    2f38:	af 92       	push	r10
    2f3a:	bf 92       	push	r11
    2f3c:	cf 92       	push	r12
    2f3e:	df 92       	push	r13
    2f40:	ef 92       	push	r14
    2f42:	ff 92       	push	r15
    2f44:	0f 93       	push	r16
    2f46:	1f 93       	push	r17
    2f48:	cf 93       	push	r28
    2f4a:	df 93       	push	r29
    2f4c:	cd b7       	in	r28, 0x3d	; 61
    2f4e:	de b7       	in	r29, 0x3e	; 62
    2f50:	ca 1b       	sub	r28, r26
    2f52:	db 0b       	sbc	r29, r27
    2f54:	0f b6       	in	r0, 0x3f	; 63
    2f56:	f8 94       	cli
    2f58:	de bf       	out	0x3e, r29	; 62
    2f5a:	0f be       	out	0x3f, r0	; 63
    2f5c:	cd bf       	out	0x3d, r28	; 61
    2f5e:	09 94       	ijmp

00002f60 <__epilogue_restores__>:
    2f60:	2a 88       	ldd	r2, Y+18	; 0x12
    2f62:	39 88       	ldd	r3, Y+17	; 0x11
    2f64:	48 88       	ldd	r4, Y+16	; 0x10
    2f66:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f68:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f6a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f6c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f6e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f70:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f72:	b9 84       	ldd	r11, Y+9	; 0x09
    2f74:	c8 84       	ldd	r12, Y+8	; 0x08
    2f76:	df 80       	ldd	r13, Y+7	; 0x07
    2f78:	ee 80       	ldd	r14, Y+6	; 0x06
    2f7a:	fd 80       	ldd	r15, Y+5	; 0x05
    2f7c:	0c 81       	ldd	r16, Y+4	; 0x04
    2f7e:	1b 81       	ldd	r17, Y+3	; 0x03
    2f80:	aa 81       	ldd	r26, Y+2	; 0x02
    2f82:	b9 81       	ldd	r27, Y+1	; 0x01
    2f84:	ce 0f       	add	r28, r30
    2f86:	d1 1d       	adc	r29, r1
    2f88:	0f b6       	in	r0, 0x3f	; 63
    2f8a:	f8 94       	cli
    2f8c:	de bf       	out	0x3e, r29	; 62
    2f8e:	0f be       	out	0x3f, r0	; 63
    2f90:	cd bf       	out	0x3d, r28	; 61
    2f92:	ed 01       	movw	r28, r26
    2f94:	08 95       	ret

00002f96 <itoa>:
    2f96:	fb 01       	movw	r30, r22
    2f98:	9f 01       	movw	r18, r30
    2f9a:	e8 94       	clt
    2f9c:	42 30       	cpi	r20, 0x02	; 2
    2f9e:	c4 f0       	brlt	.+48     	; 0x2fd0 <itoa+0x3a>
    2fa0:	45 32       	cpi	r20, 0x25	; 37
    2fa2:	b4 f4       	brge	.+44     	; 0x2fd0 <itoa+0x3a>
    2fa4:	4a 30       	cpi	r20, 0x0A	; 10
    2fa6:	29 f4       	brne	.+10     	; 0x2fb2 <itoa+0x1c>
    2fa8:	97 fb       	bst	r25, 7
    2faa:	1e f4       	brtc	.+6      	; 0x2fb2 <itoa+0x1c>
    2fac:	90 95       	com	r25
    2fae:	81 95       	neg	r24
    2fb0:	9f 4f       	sbci	r25, 0xFF	; 255
    2fb2:	64 2f       	mov	r22, r20
    2fb4:	77 27       	eor	r23, r23
    2fb6:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <__udivmodhi4>
    2fba:	80 5d       	subi	r24, 0xD0	; 208
    2fbc:	8a 33       	cpi	r24, 0x3A	; 58
    2fbe:	0c f0       	brlt	.+2      	; 0x2fc2 <itoa+0x2c>
    2fc0:	89 5d       	subi	r24, 0xD9	; 217
    2fc2:	81 93       	st	Z+, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	00 97       	sbiw	r24, 0x00	; 0
    2fc8:	a1 f7       	brne	.-24     	; 0x2fb2 <itoa+0x1c>
    2fca:	16 f4       	brtc	.+4      	; 0x2fd0 <itoa+0x3a>
    2fcc:	5d e2       	ldi	r21, 0x2D	; 45
    2fce:	51 93       	st	Z+, r21
    2fd0:	10 82       	st	Z, r1
    2fd2:	c9 01       	movw	r24, r18
    2fd4:	0c 94 ec 17 	jmp	0x2fd8	; 0x2fd8 <strrev>

00002fd8 <strrev>:
    2fd8:	dc 01       	movw	r26, r24
    2fda:	fc 01       	movw	r30, r24
    2fdc:	67 2f       	mov	r22, r23
    2fde:	71 91       	ld	r23, Z+
    2fe0:	77 23       	and	r23, r23
    2fe2:	e1 f7       	brne	.-8      	; 0x2fdc <strrev+0x4>
    2fe4:	32 97       	sbiw	r30, 0x02	; 2
    2fe6:	04 c0       	rjmp	.+8      	; 0x2ff0 <strrev+0x18>
    2fe8:	7c 91       	ld	r23, X
    2fea:	6d 93       	st	X+, r22
    2fec:	70 83       	st	Z, r23
    2fee:	62 91       	ld	r22, -Z
    2ff0:	ae 17       	cp	r26, r30
    2ff2:	bf 07       	cpc	r27, r31
    2ff4:	c8 f3       	brcs	.-14     	; 0x2fe8 <strrev+0x10>
    2ff6:	08 95       	ret

00002ff8 <__udivmodhi4>:
    2ff8:	aa 1b       	sub	r26, r26
    2ffa:	bb 1b       	sub	r27, r27
    2ffc:	51 e1       	ldi	r21, 0x11	; 17
    2ffe:	07 c0       	rjmp	.+14     	; 0x300e <__udivmodhi4_ep>

00003000 <__udivmodhi4_loop>:
    3000:	aa 1f       	adc	r26, r26
    3002:	bb 1f       	adc	r27, r27
    3004:	a6 17       	cp	r26, r22
    3006:	b7 07       	cpc	r27, r23
    3008:	10 f0       	brcs	.+4      	; 0x300e <__udivmodhi4_ep>
    300a:	a6 1b       	sub	r26, r22
    300c:	b7 0b       	sbc	r27, r23

0000300e <__udivmodhi4_ep>:
    300e:	88 1f       	adc	r24, r24
    3010:	99 1f       	adc	r25, r25
    3012:	5a 95       	dec	r21
    3014:	a9 f7       	brne	.-22     	; 0x3000 <__udivmodhi4_loop>
    3016:	80 95       	com	r24
    3018:	90 95       	com	r25
    301a:	bc 01       	movw	r22, r24
    301c:	cd 01       	movw	r24, r26
    301e:	08 95       	ret

00003020 <_exit>:
    3020:	f8 94       	cli

00003022 <__stop_program>:
    3022:	ff cf       	rjmp	.-2      	; 0x3022 <__stop_program>
